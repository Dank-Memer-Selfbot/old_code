# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal

# -- template actions.py.jinja --
import warnings

from . import types, errors
from ._types import BaseModelT


if TYPE_CHECKING:
    from .client import Client


class ServerActions:
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type['models.Server']) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: str,
        *args: Any,
    ) -> List['models.Server']:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Server]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Server.prisma().query_raw(
            'SELECT * FROM Server WHERE description = ?',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: str,
        *args: Any,
    ) -> Optional['models.Server']:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Server
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Server.prisma().query_first(
            'SELECT * FROM Server WHERE favicon = ?',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ServerCreateInput,
        include: Optional[types.ServerInclude] = None
    ) -> 'models.Server':
        """Create a new Server record.

        Parameters
        ----------
        data
            Server record data
        include
            Specifies which relations should be loaded on the returned Server model

        Returns
        -------
        prisma.models.Server
            The created Server record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Server record from just the required fields
        server = await Server.prisma().create(
            data={
                # data to create a Server record
                'description': 'ggciceaie',
                'address': 'bbehjachib',
                'max_players': 2035015474,
                'online_players': 368800899,
                'versionProtocol': 1508029952,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='Server',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ServerCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Server records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Server record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Server.prisma().create_many(
            data=[
                {
                    # data to create a Server record
                    'description': 'eigcfgbif',
                    'address': 'bagcfbhiig',
                    'max_players': 267834847,
                    'online_players': 180171308,
                    'versionProtocol': 836760821,
                },
                {
                    # data to create a Server record
                    'description': 'fjfddhigg',
                    'address': 'hjaecfifb',
                    'max_players': 2111915288,
                    'online_players': 1149758321,
                    'versionProtocol': 1644289366,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='Server',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ServerWhereUniqueInput,
        include: Optional[types.ServerInclude] = None
    ) -> Optional['models.Server']:
        """Delete a single Server record.

        Parameters
        ----------
        where
            Server filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Server model

        Returns
        -------
        prisma.models.Server
            The deleted Server record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        server = await Server.prisma().delete(
            where={
                'address': 'bdiicjafbj',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='Server',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.ServerWhereUniqueInput,
        include: Optional[types.ServerInclude] = None
    ) -> Optional['models.Server']:
        """Find a unique Server record.

        Parameters
        ----------
        where
            Server filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Server model

        Returns
        -------
        prisma.models.Server
            The found Server record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        server = await Server.prisma().find_unique(
            where={
                'address': 'bgehebiafc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='Server',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ServerWhereInput] = None,
        cursor: Optional[types.ServerWhereUniqueInput] = None,
        include: Optional[types.ServerInclude] = None,
        order: Optional[Union[types.ServerOrderByInput, List[types.ServerOrderByInput]]] = None,
    ) -> List['models.Server']:
        """Find multiple Server records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Server records returned
        skip
            Ignore the first N results
        where
            Server filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Server model
        order
            Order the returned Server records by any field

        Returns
        -------
        List[prisma.models.Server]
            The list of all Server records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Server records
        servers = await Server.prisma().find_many(take=10)

        # find the first 5 Server records ordered by the address field
        servers = await Server.prisma().find_many(
            take=5,
            order={
                'address': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='Server',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ServerWhereInput] = None,
        cursor: Optional[types.ServerWhereUniqueInput] = None,
        include: Optional[types.ServerInclude] = None,
        order: Optional[Union[types.ServerOrderByInput, List[types.ServerOrderByInput]]] = None,
    ) -> Optional['models.Server']:
        """Find a single Server record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Server filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Server model
        order
            Order the returned Server records by any field

        Returns
        -------
        prisma.models.Server
            The first Server record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Server record ordered by the max_players field
        server = await Server.prisma().find_first(
            skip=1,
            order={
                'max_players': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='Server',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.ServerUpdateInput,
        where: types.ServerWhereUniqueInput,
        include: Optional[types.ServerInclude] = None
    ) -> Optional['models.Server']:
        """Update a single Server record.

        Parameters
        ----------
        data
            Server record data specifying what to update
        where
            Server filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Server model

        Returns
        -------
        prisma.models.Server
            The updated Server record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        server = await Server.prisma().update(
            where={
                'address': 'bghffegacj',
            },
            data={
                # data to update the Server record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='Server',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.ServerWhereUniqueInput,
        data: types.ServerUpsertInput,
        include: Optional[types.ServerInclude] = None,
    ) -> 'models.Server':
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Server filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Server model

        Returns
        -------
        prisma.models.Server
            The created or updated Server record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        server = await Server.prisma().upsert(
            where={
                'address': 'bhghchehcc',
            },
            data={
                'create': {
                    'address': 'bhghchehcc',
                    'description': 'fjfddhigg',
                    'max_players': 2111915288,
                    'online_players': 1149758321,
                    'versionProtocol': 1644289366,
                },
                'update': {
                    'description': 'fjfddhigg',
                    'max_players': 2111915288,
                    'online_players': 1149758321,
                    'versionProtocol': 1644289366,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='Server',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.ServerUpdateManyMutationInput,
        where: types.ServerWhereInput,
    ) -> int:
        """Update multiple Server records

        Parameters
        ----------
        data
            Server data to update the selected Server records to
        where
            Filter to select the Server records to update

        Returns
        -------
        int
            The total number of Server records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Server records
        total = await Server.prisma().update_many(
            data={
                'online_players': 326272115
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='Server',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ServerWhereInput] = None,
        cursor: Optional[types.ServerWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Server records present in the database

        Parameters
        ----------
        select
            Select the Server fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Server filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ServerCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Server.prisma().count()

        # results: prisma.types.ServerCountAggregateOutput
        results = await Server.prisma().count(
            select={
                '_all': True,
                'versionProtocol': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ServerCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ServerWhereInput] = None,
        cursor: Optional[types.ServerWhereUniqueInput] = None,
    ) -> types.ServerCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ServerCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ServerWhereInput] = None,
        cursor: Optional[types.ServerWhereUniqueInput] = None,
    ) -> Union[int, types.ServerCountAggregateOutput]:
        """Count the number of Server records present in the database

        Parameters
        ----------
        select
            Select the Server fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Server filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ServerCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Server.prisma().count()

        # results: prisma.types.ServerCountAggregateOutput
        results = await Server.prisma().count(
            select={
                '_all': True,
                'description': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='Server',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ServerCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ServerWhereInput] = None
    ) -> int:
        """Delete multiple Server records.

        Parameters
        ----------
        where
            Optional Server filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Server records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Server records
        total = await Server.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='Server',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ServerScalarFieldKeys'],
        *,
        where: Optional['types.ServerWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ServerAvgAggregateInput'] = None,
        sum: Optional['types.ServerSumAggregateInput'] = None,
        min: Optional['types.ServerMinAggregateInput'] = None,
        max: Optional['types.ServerMaxAggregateInput'] = None,
        having: Optional['types.ServerScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ServerCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ServerScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ServerScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ServerGroupByOutput']:
        """Group Server records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Server fields to group records by
        where
            Server filter to select records
        take
            Limit the maximum number of Server records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ServerGroupByOutput]
            A list of dictionaries representing the Server record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Server records by favicon values
        # and count how many records are in each group
        results = await Server.prisma().group_by(
            ['favicon'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='Server',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class PlayerActions:
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type['models.Player']) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: str,
        *args: Any,
    ) -> List['models.Player']:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Player]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Player.prisma().query_raw(
            'SELECT * FROM Player WHERE uuid = ?',
            'bdedcabahc',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: str,
        *args: Any,
    ) -> Optional['models.Player']:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Player
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Player.prisma().query_first(
            'SELECT * FROM Player WHERE username = ?',
            'ghfhiafcb',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.PlayerCreateInput,
        include: Optional[types.PlayerInclude] = None
    ) -> 'models.Player':
        """Create a new Player record.

        Parameters
        ----------
        data
            Player record data
        include
            Specifies which relations should be loaded on the returned Player model

        Returns
        -------
        prisma.models.Player
            The created Player record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Player record from just the required fields
        player = await Player.prisma().create(
            data={
                # data to create a Player record
                'uuid': 'heejgedji',
                'username': 'bjgjgibgbf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='Player',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.PlayerCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Player records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Player record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Player.prisma().create_many(
            data=[
                {
                    # data to create a Player record
                    'uuid': 'bbbgbhfjge',
                    'username': 'igbehcbab',
                },
                {
                    # data to create a Player record
                    'uuid': 'bdadaadhag',
                    'username': 'bgiggdidbf',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='Player',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.PlayerWhereUniqueInput,
        include: Optional[types.PlayerInclude] = None
    ) -> Optional['models.Player']:
        """Delete a single Player record.

        Parameters
        ----------
        where
            Player filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Player model

        Returns
        -------
        prisma.models.Player
            The deleted Player record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        player = await Player.prisma().delete(
            where={
                'uuid': 'caaaedabfc',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='Player',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.PlayerWhereUniqueInput,
        include: Optional[types.PlayerInclude] = None
    ) -> Optional['models.Player']:
        """Find a unique Player record.

        Parameters
        ----------
        where
            Player filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Player model

        Returns
        -------
        prisma.models.Player
            The found Player record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        player = await Player.prisma().find_unique(
            where={
                'uuid': 'bigibebcib',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='Player',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PlayerWhereInput] = None,
        cursor: Optional[types.PlayerWhereUniqueInput] = None,
        include: Optional[types.PlayerInclude] = None,
        order: Optional[Union[types.PlayerOrderByInput, List[types.PlayerOrderByInput]]] = None,
    ) -> List['models.Player']:
        """Find multiple Player records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Player records returned
        skip
            Ignore the first N results
        where
            Player filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Player model
        order
            Order the returned Player records by any field

        Returns
        -------
        List[prisma.models.Player]
            The list of all Player records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Player records
        players = await Player.prisma().find_many(take=10)

        # find the first 5 Player records ordered by the uuid field
        players = await Player.prisma().find_many(
            take=5,
            order={
                'uuid': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='Player',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PlayerWhereInput] = None,
        cursor: Optional[types.PlayerWhereUniqueInput] = None,
        include: Optional[types.PlayerInclude] = None,
        order: Optional[Union[types.PlayerOrderByInput, List[types.PlayerOrderByInput]]] = None,
    ) -> Optional['models.Player']:
        """Find a single Player record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Player filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Player model
        order
            Order the returned Player records by any field

        Returns
        -------
        prisma.models.Player
            The first Player record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Player record ordered by the username field
        player = await Player.prisma().find_first(
            skip=1,
            order={
                'username': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='Player',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.PlayerUpdateInput,
        where: types.PlayerWhereUniqueInput,
        include: Optional[types.PlayerInclude] = None
    ) -> Optional['models.Player']:
        """Update a single Player record.

        Parameters
        ----------
        data
            Player record data specifying what to update
        where
            Player filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Player model

        Returns
        -------
        prisma.models.Player
            The updated Player record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        player = await Player.prisma().update(
            where={
                'uuid': 'bigaiehgcc',
            },
            data={
                # data to update the Player record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='Player',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.PlayerWhereUniqueInput,
        data: types.PlayerUpsertInput,
        include: Optional[types.PlayerInclude] = None,
    ) -> 'models.Player':
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Player filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Player model

        Returns
        -------
        prisma.models.Player
            The created or updated Player record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        player = await Player.prisma().upsert(
            where={
                'uuid': 'beeifcbebf',
            },
            data={
                'create': {
                    'uuid': 'beeifcbebf',
                    'username': 'bgiggdidbf',
                },
                'update': {
                    'username': 'bgiggdidbf',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='Player',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.PlayerUpdateManyMutationInput,
        where: types.PlayerWhereInput,
    ) -> int:
        """Update multiple Player records

        Parameters
        ----------
        data
            Player data to update the selected Player records to
        where
            Filter to select the Player records to update

        Returns
        -------
        int
            The total number of Player records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Player records
        total = await Player.prisma().update_many(
            data={
                'uuid': 'bgcigfahea'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='Player',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PlayerWhereInput] = None,
        cursor: Optional[types.PlayerWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Player records present in the database

        Parameters
        ----------
        select
            Select the Player fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Player filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PlayerCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Player.prisma().count()

        # results: prisma.types.PlayerCountAggregateOutput
        results = await Player.prisma().count(
            select={
                '_all': True,
                'username': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.PlayerCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PlayerWhereInput] = None,
        cursor: Optional[types.PlayerWhereUniqueInput] = None,
    ) -> types.PlayerCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.PlayerCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PlayerWhereInput] = None,
        cursor: Optional[types.PlayerWhereUniqueInput] = None,
    ) -> Union[int, types.PlayerCountAggregateOutput]:
        """Count the number of Player records present in the database

        Parameters
        ----------
        select
            Select the Player fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Player filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PlayerCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Player.prisma().count()

        # results: prisma.types.PlayerCountAggregateOutput
        results = await Player.prisma().count(
            select={
                '_all': True,
                'uuid': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='Player',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.PlayerCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.PlayerWhereInput] = None
    ) -> int:
        """Delete multiple Player records.

        Parameters
        ----------
        where
            Optional Player filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Player records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Player records
        total = await Player.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='Player',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.PlayerScalarFieldKeys'],
        *,
        where: Optional['types.PlayerWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.PlayerAvgAggregateInput'] = None,
        sum: Optional['types.PlayerSumAggregateInput'] = None,
        min: Optional['types.PlayerMinAggregateInput'] = None,
        max: Optional['types.PlayerMaxAggregateInput'] = None,
        having: Optional['types.PlayerScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.PlayerCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.PlayerScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.PlayerScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.PlayerGroupByOutput']:
        """Group Player records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Player fields to group records by
        where
            Player filter to select records
        take
            Limit the maximum number of Player records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.PlayerGroupByOutput]
            A list of dictionaries representing the Player record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Player records by username values
        # and count how many records are in each group
        results = await Player.prisma().group_by(
            ['username'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='Player',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class VersionActions:
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type['models.Version']) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: str,
        *args: Any,
    ) -> List['models.Version']:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Version]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Version.prisma().query_raw(
            'SELECT * FROM Version WHERE protocol = ?',
            1249606685,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: str,
        *args: Any,
    ) -> Optional['models.Version']:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Version
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Version.prisma().query_first(
            'SELECT * FROM Version WHERE name = ?',
            'idfjadbcc',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.VersionCreateInput,
        include: Optional[types.VersionInclude] = None
    ) -> 'models.Version':
        """Create a new Version record.

        Parameters
        ----------
        data
            Version record data
        include
            Specifies which relations should be loaded on the returned Version model

        Returns
        -------
        prisma.models.Version
            The created Version record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Version record from just the required fields
        version = await Version.prisma().create(
            data={
                # data to create a Version record
                'protocol': 763719779,
                'name': 'ecjjjfbae',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='Version',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.VersionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Version records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Version record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Version.prisma().create_many(
            data=[
                {
                    # data to create a Version record
                    'protocol': 1775811865,
                    'name': 'ijdbeffgg',
                },
                {
                    # data to create a Version record
                    'protocol': 995405759,
                    'name': 'cbachdgfce',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='Version',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.VersionWhereUniqueInput,
        include: Optional[types.VersionInclude] = None
    ) -> Optional['models.Version']:
        """Delete a single Version record.

        Parameters
        ----------
        where
            Version filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Version model

        Returns
        -------
        prisma.models.Version
            The deleted Version record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        version = await Version.prisma().delete(
            where={
                'protocol': 271520213,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='Version',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.VersionWhereUniqueInput,
        include: Optional[types.VersionInclude] = None
    ) -> Optional['models.Version']:
        """Find a unique Version record.

        Parameters
        ----------
        where
            Version filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Version model

        Returns
        -------
        prisma.models.Version
            The found Version record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        version = await Version.prisma().find_unique(
            where={
                'protocol': 456633834,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='Version',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.VersionWhereInput] = None,
        cursor: Optional[types.VersionWhereUniqueInput] = None,
        include: Optional[types.VersionInclude] = None,
        order: Optional[Union[types.VersionOrderByInput, List[types.VersionOrderByInput]]] = None,
    ) -> List['models.Version']:
        """Find multiple Version records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Version records returned
        skip
            Ignore the first N results
        where
            Version filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Version model
        order
            Order the returned Version records by any field

        Returns
        -------
        List[prisma.models.Version]
            The list of all Version records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Version records
        versions = await Version.prisma().find_many(take=10)

        # find the first 5 Version records ordered by the protocol field
        versions = await Version.prisma().find_many(
            take=5,
            order={
                'protocol': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='Version',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.VersionWhereInput] = None,
        cursor: Optional[types.VersionWhereUniqueInput] = None,
        include: Optional[types.VersionInclude] = None,
        order: Optional[Union[types.VersionOrderByInput, List[types.VersionOrderByInput]]] = None,
    ) -> Optional['models.Version']:
        """Find a single Version record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Version filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Version model
        order
            Order the returned Version records by any field

        Returns
        -------
        prisma.models.Version
            The first Version record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Version record ordered by the name field
        version = await Version.prisma().find_first(
            skip=1,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='Version',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.VersionUpdateInput,
        where: types.VersionWhereUniqueInput,
        include: Optional[types.VersionInclude] = None
    ) -> Optional['models.Version']:
        """Update a single Version record.

        Parameters
        ----------
        data
            Version record data specifying what to update
        where
            Version filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Version model

        Returns
        -------
        prisma.models.Version
            The updated Version record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        version = await Version.prisma().update(
            where={
                'protocol': 2058258651,
            },
            data={
                # data to update the Version record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='Version',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.VersionWhereUniqueInput,
        data: types.VersionUpsertInput,
        include: Optional[types.VersionInclude] = None,
    ) -> 'models.Version':
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Version filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Version model

        Returns
        -------
        prisma.models.Version
            The created or updated Version record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        version = await Version.prisma().upsert(
            where={
                'protocol': 1583689592,
            },
            data={
                'create': {
                    'protocol': 1583689592,
                    'name': 'cbachdgfce',
                },
                'update': {
                    'name': 'cbachdgfce',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='Version',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.VersionUpdateManyMutationInput,
        where: types.VersionWhereInput,
    ) -> int:
        """Update multiple Version records

        Parameters
        ----------
        data
            Version data to update the selected Version records to
        where
            Filter to select the Version records to update

        Returns
        -------
        int
            The total number of Version records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Version records
        total = await Version.prisma().update_many(
            data={
                'protocol': 878442065
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='Version',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.VersionWhereInput] = None,
        cursor: Optional[types.VersionWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Version records present in the database

        Parameters
        ----------
        select
            Select the Version fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Version filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.VersionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Version.prisma().count()

        # results: prisma.types.VersionCountAggregateOutput
        results = await Version.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.VersionCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.VersionWhereInput] = None,
        cursor: Optional[types.VersionWhereUniqueInput] = None,
    ) -> types.VersionCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.VersionCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.VersionWhereInput] = None,
        cursor: Optional[types.VersionWhereUniqueInput] = None,
    ) -> Union[int, types.VersionCountAggregateOutput]:
        """Count the number of Version records present in the database

        Parameters
        ----------
        select
            Select the Version fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Version filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.VersionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Version.prisma().count()

        # results: prisma.types.VersionCountAggregateOutput
        results = await Version.prisma().count(
            select={
                '_all': True,
                'protocol': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='Version',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.VersionCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.VersionWhereInput] = None
    ) -> int:
        """Delete multiple Version records.

        Parameters
        ----------
        where
            Optional Version filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Version records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Version records
        total = await Version.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='Version',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.VersionScalarFieldKeys'],
        *,
        where: Optional['types.VersionWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.VersionAvgAggregateInput'] = None,
        sum: Optional['types.VersionSumAggregateInput'] = None,
        min: Optional['types.VersionMinAggregateInput'] = None,
        max: Optional['types.VersionMaxAggregateInput'] = None,
        having: Optional['types.VersionScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.VersionCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.VersionScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.VersionScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.VersionGroupByOutput']:
        """Group Version records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Version fields to group records by
        where
            Version filter to select records
        take
            Limit the maximum number of Version records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.VersionGroupByOutput]
            A list of dictionaries representing the Version record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Version records by name values
        # and count how many records are in each group
        results = await Version.prisma().group_by(
            ['name'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='Version',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models
