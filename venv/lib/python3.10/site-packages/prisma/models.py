# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal

# -- template models.py.jinja --
import os
import logging
import inspect
import warnings
from pydantic import BaseConfig, BaseModel, Field, validator

from . import types, enums, errors, fields
from ._types import BaseModelT, FuncType
from .builder import serialize_base64
from .generator import partial_models_ctx, PartialModelField


class Config(BaseConfig):
    use_enum_values: bool = True
    arbitrary_types_allowed: bool = True
    allow_population_by_field_name: bool = True
    json_encoders: Dict[Union[Type[Any], str], FuncType] = {
        fields.Base64: serialize_base64,
    }


log: logging.Logger = logging.getLogger(__name__)
_created_partial_types: Set[str] = set()

# packages that implicitly subclass models
# this should not raise any warnings as users
# of these packages cannot do anything about it
_implicit_subclass_packages: Set[str] = {
    'fastapi',
}


def _maybe_warn_subclassing(new_model: str, base_model: str, *, stacklevel: int = 3) -> None:
    # at least 3 frames are guaranteed to exist if we are being called from __init_subclass__
    # stack: 1 = __init_subclass__, 2 = abc, 3 = <caller>
    try:
        frame = inspect.stack()[stacklevel]
        module = inspect.getmodule(frame[0])
        if module is not None:
            name, *_ = module.__name__.split('.')
            if name in _implicit_subclass_packages:
                return
    except Exception as exc:
        # disabling subclass warnings depending on the caller module is not a mission critical
        # feature, users can disable these warnings themselves
        # https://github.com/RobertCraigie/prisma-client-py/issues/278#issuecomment-1031421561
        log.debug('Ignoring exception encountered during stack inspection check: %s', str(exc))

    message = (
        'Subclassing models while using pseudo-recursive types may cause unexpected '
        'errors when static type checking;\n'
        'You can disable this warning by generating fully recursive types: \n'
        'https://prisma-client-py.readthedocs.io/en/stable/reference/config/#recursive\n'
        'or if that is not possible you can pass warn_subclass=False e.g.\n'
        f'  class {new_model}(prisma.models.{base_model}, warn_subclass=False):'
    )
    warnings.warn(message, errors.UnsupportedSubclassWarning, stacklevel=4)


class Server(BaseModel):
    """Represents a Server record"""

    id: int
    ip_address: str
    description: str
    favicon: str
    version: Optional['models.Version']
    players: Optional[List['models.Player']]
    minmax: Optional['models.Maximum']
    versionId: int
    maximumId: int

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.ServerActions':
        from .client import get_client

        return actions.ServerActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'Server', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.ServerKeys']] = None,
        exclude: Optional[Iterable['types.ServerKeys']] = None,
        required: Optional[Iterable['types.ServerKeys']] = None,
        optional: Optional[Iterable['types.ServerKeys']] = None,
        relations: Optional[Mapping['types.ServerRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.ServerKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _Server_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _Server_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _Server_fields.items()
                    if key not in exclude
                }
            else:
                fields = _Server_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in _Server_fields.items()
                    if key not in _Server_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Server_relational_fields:
                        raise errors.UnknownRelationalFieldError('Server', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Server / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class Player(BaseModel):
    """Represents a Player record"""

    id: int
    uuid: str
    username: str
    authenticated: bool
    Server: Optional['models.Server']
    serverId: Optional[int]

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.PlayerActions':
        from .client import get_client

        return actions.PlayerActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'Player', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.PlayerKeys']] = None,
        exclude: Optional[Iterable['types.PlayerKeys']] = None,
        required: Optional[Iterable['types.PlayerKeys']] = None,
        optional: Optional[Iterable['types.PlayerKeys']] = None,
        relations: Optional[Mapping['types.PlayerRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.PlayerKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _Player_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _Player_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _Player_fields.items()
                    if key not in exclude
                }
            else:
                fields = _Player_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in _Player_fields.items()
                    if key not in _Player_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Player_relational_fields:
                        raise errors.UnknownRelationalFieldError('Player', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Player / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class Version(BaseModel):
    """Represents a Version record"""

    id: int
    name: str
    protocol: int
    Server: Optional[List['models.Server']]

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.VersionActions':
        from .client import get_client

        return actions.VersionActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'Version', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.VersionKeys']] = None,
        exclude: Optional[Iterable['types.VersionKeys']] = None,
        required: Optional[Iterable['types.VersionKeys']] = None,
        optional: Optional[Iterable['types.VersionKeys']] = None,
        relations: Optional[Mapping['types.VersionRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.VersionKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _Version_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _Version_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _Version_fields.items()
                    if key not in exclude
                }
            else:
                fields = _Version_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in _Version_fields.items()
                    if key not in _Version_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Version_relational_fields:
                        raise errors.UnknownRelationalFieldError('Version', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Version / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class Maximum(BaseModel):
    """Represents a Maximum record"""

    id: int
    min: str
    max: str
    Server: Optional[List['models.Server']]

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.MaximumActions':
        from .client import get_client

        return actions.MaximumActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'Maximum', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.MaximumKeys']] = None,
        exclude: Optional[Iterable['types.MaximumKeys']] = None,
        required: Optional[Iterable['types.MaximumKeys']] = None,
        optional: Optional[Iterable['types.MaximumKeys']] = None,
        relations: Optional[Mapping['types.MaximumRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.MaximumKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _Maximum_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _Maximum_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _Maximum_fields.items()
                    if key not in exclude
                }
            else:
                fields = _Maximum_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in _Maximum_fields.items()
                    if key not in _Maximum_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Maximum_relational_fields:
                        raise errors.UnknownRelationalFieldError('Maximum', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Maximum / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)



_Server_relational_fields: Set[str] = {
        'version',
        'players',
        'minmax',
    }
_Server_fields: Dict['types.ServerKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'int',
        'documentation': None,
    },
    'ip_address': {
        'name': 'ip_address',
        'is_list': False,
        'optional': False,
        'type': 'str',
        'documentation': None,
    },
    'description': {
        'name': 'description',
        'is_list': False,
        'optional': False,
        'type': 'str',
        'documentation': None,
    },
    'favicon': {
        'name': 'favicon',
        'is_list': False,
        'optional': False,
        'type': 'str',
        'documentation': None,
    },
    'version': {
        'name': 'version',
        'is_list': False,
        'optional': True,
        'type': 'models.Version',
        'documentation': None,
    },
    'players': {
        'name': 'players',
        'is_list': True,
        'optional': True,
        'type': 'List[\'models.Player\']',
        'documentation': None,
    },
    'minmax': {
        'name': 'minmax',
        'is_list': False,
        'optional': True,
        'type': 'models.Maximum',
        'documentation': None,
    },
    'versionId': {
        'name': 'versionId',
        'is_list': False,
        'optional': False,
        'type': 'int',
        'documentation': None,
    },
    'maximumId': {
        'name': 'maximumId',
        'is_list': False,
        'optional': False,
        'type': 'int',
        'documentation': None,
    },
}

_Player_relational_fields: Set[str] = {
        'Server',
    }
_Player_fields: Dict['types.PlayerKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'int',
        'documentation': None,
    },
    'uuid': {
        'name': 'uuid',
        'is_list': False,
        'optional': False,
        'type': 'str',
        'documentation': None,
    },
    'username': {
        'name': 'username',
        'is_list': False,
        'optional': False,
        'type': 'str',
        'documentation': None,
    },
    'authenticated': {
        'name': 'authenticated',
        'is_list': False,
        'optional': False,
        'type': 'bool',
        'documentation': None,
    },
    'Server': {
        'name': 'Server',
        'is_list': False,
        'optional': True,
        'type': 'models.Server',
        'documentation': None,
    },
    'serverId': {
        'name': 'serverId',
        'is_list': False,
        'optional': True,
        'type': 'int',
        'documentation': None,
    },
}

_Version_relational_fields: Set[str] = {
        'Server',
    }
_Version_fields: Dict['types.VersionKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'int',
        'documentation': None,
    },
    'name': {
        'name': 'name',
        'is_list': False,
        'optional': False,
        'type': 'str',
        'documentation': None,
    },
    'protocol': {
        'name': 'protocol',
        'is_list': False,
        'optional': False,
        'type': 'int',
        'documentation': None,
    },
    'Server': {
        'name': 'Server',
        'is_list': True,
        'optional': True,
        'type': 'List[\'models.Server\']',
        'documentation': None,
    },
}

_Maximum_relational_fields: Set[str] = {
        'Server',
    }
_Maximum_fields: Dict['types.MaximumKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'int',
        'documentation': None,
    },
    'min': {
        'name': 'min',
        'is_list': False,
        'optional': False,
        'type': 'str',
        'documentation': None,
    },
    'max': {
        'name': 'max',
        'is_list': False,
        'optional': False,
        'type': 'str',
        'documentation': None,
    },
    'Server': {
        'name': 'Server',
        'is_list': True,
        'optional': True,
        'type': 'List[\'models.Server\']',
        'documentation': None,
    },
}



# we have to import ourselves as relation types are namespaced to models
# e.g. models.Post
from . import models, actions

# required to support relationships between models
Server.update_forward_refs()
Player.update_forward_refs()
Version.update_forward_refs()
Maximum.update_forward_refs()
