# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal

# -- template client.py.jinja --
from types import TracebackType

from . import types, models, errors, actions
from .types import DatasourceOverride, HttpConfig
from ._types import BaseModelT
from .engine import AbstractEngine, QueryEngine
from .builder import QueryBuilder
from .generator.models import EngineType


__all__ = (
    'ENGINE_TYPE',
    'Batch',
    'Prisma',
    'Client',
    'load_env',
    'register',
    'get_client',
)

SCHEMA = '''
// database
datasource db {
  provider = "sqlite"
  url      = "file:database.db"
}

// generator
generator client {
  provider = "prisma-client-py"
}

model Server {
  version         Version  @relation(fields: [versionProtocol], references: [protocol])
  players         Player[]
  description     String
  favicon         String?
  address         String   @id @unique
  max_players     Int
  online_players  Int
  versionProtocol Int
}

model Player {
  uuid     String   @id @unique
  username String
  servers  Server[]
}

model Version {
  protocol Int      @id @unique
  name     String
  Server   Server[]
}
'''

ENGINE_TYPE: EngineType = EngineType.binary

RegisteredClient = Union['Prisma', Callable[[], 'Prisma']]
_registered_client: Optional[RegisteredClient] = None


class UseClientDefault:
    """For certain parameters such as `timeout=...` we can make our intent more clear
    by typing the parameter with this class rather than using None, for example:

    ```py
    def connect(timeout: Union[int, UseClientDefault] = UseClientDefault()) -> None: ...
    ```

    relays the intention more clearly than:

    ```py
    def connect(timeout: Optional[int] = None) -> None: ...
    ```

    This solution also allows us to indicate an "unset" state that is uniquely distinct
    from `None` which may be useful in the future.
    """


_USE_CLIENT_DEFAULT = UseClientDefault()


def load_env(*, override: bool = True, **kwargs: Any) -> None:
    """Load environemntal variables from dotenv files

    Loads from the following files relative to the current
    working directory:

    - .env
    - prisma/.env
    """
    from dotenv import load_dotenv

    load_dotenv('.env', override=override, **kwargs)
    load_dotenv('prisma/.env', override=override, **kwargs)


def register(client: RegisteredClient) -> None:
    """Register a client instance to be retrieved by `get_client()`

    This function _must_ only be called once, preferrably as soon as possible
    to avoid any potentially confusing errors with threads or processes.
    """
    global _registered_client

    if _registered_client is not None:
        raise errors.ClientAlreadyRegisteredError()

    if not isinstance(client, Prisma) and not callable(client):
        raise TypeError(
            f'Expected either a {Prisma} instance or a function that returns a {Prisma} but got {client} instead.'
        )

    _registered_client = client


def get_client() -> 'Prisma':
    """Get the registered client instance

    Raises errors.ClientNotRegisteredError() if no client instance has been registered.
    """
    registered = _registered_client
    if registered is None:
        raise errors.ClientNotRegisteredError() from None

    if isinstance(registered, Prisma):
        return registered

    client = registered()
    if not isinstance(client, Prisma):  # pyright: ignore[reportUnnecessaryIsInstance]
        raise TypeError(
            f'Registered function returned {client} instead of a {Prisma} instance.'
        )

    return client


class Prisma:
    server: 'actions.ServerActions'
    player: 'actions.PlayerActions'
    version: 'actions.VersionActions'

    __slots__ = (
        'server',
        'player',
        'version',
        '__engine',
        '_active_provider',
        '_log_queries',
        '_datasource',
        '_connect_timeout',
        '_http_config',
    )

    def __init__(
        self,
        *,
        use_dotenv: bool = True,
        log_queries: bool = False,
        auto_register: bool = False,
        datasource: Optional[DatasourceOverride] = None,
        connect_timeout: int = 10,
        http: Optional[HttpConfig] = None,
    ) -> None:
        self.server = actions.ServerActions(self, models.Server)
        self.player = actions.PlayerActions(self, models.Player)
        self.version = actions.VersionActions(self, models.Version)
        self.__engine: Optional[AbstractEngine] = None
        self._active_provider = 'sqlite'
        self._log_queries = log_queries
        self._datasource = datasource
        self._connect_timeout = connect_timeout
        self._http_config: HttpConfig = http or {}

        if use_dotenv:
            load_env()

        if auto_register:
            register(self)

    def __del__(self) -> None:
        if self.__engine is not None:
            self.__engine.stop()
            self.__engine = None


    async def __aenter__(self) -> 'Prisma':
        await self.connect()
        return self

    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if self.is_connected():
            await self.disconnect()

    def is_connected(self) -> bool:
        """Returns True if the client is connected to the query engine, False otherwise."""
        return self.__engine is not None

    async def connect(
        self,
        timeout: Union[int, UseClientDefault] = _USE_CLIENT_DEFAULT,
    ) -> None:
        """Connect to the Prisma query engine.

        It is required to call this before accessing data.
        """
        if isinstance(timeout, UseClientDefault):
            timeout = self._connect_timeout

        if self.__engine is None:
            self.__engine = self._create_engine(dml=SCHEMA)

        datasources: Optional[List[types.DatasourceOverride]] = None
        if self._datasource is not None:
            ds = self._datasource.copy()
            ds.setdefault('name', 'db')
            datasources = [ds]

        await self.__engine.connect(
            timeout=timeout,
            datasources=datasources,
        )

    async def disconnect(self) -> None:
        """Disconnect the Prisma query engine."""
        if self.__engine is not None:
            self.__engine.close()
            await self.__engine.aclose()
            self.__engine = None

    async def execute_raw(self, query: str, *args: Any) -> int:
        resp = await self._execute(
            operation='mutation',
            method='executeRaw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )
        return int(resp['data']['result'])

    @overload
    async def query_first(self, query: str, *args: Any) -> Any:
        ...

    @overload
    async def query_first(self, query: str, *args: Any, model: Type[BaseModelT]) -> Optional[BaseModelT]:
        ...

    async def query_first(
        self, query: str, *args: Any, model: Optional[Type[BaseModelT]] = None
    ) -> Union[Optional[BaseModelT], Any]:
        if model is not None:
            results = await self.query_raw(query, *args, model=model)
        else:
            results = await self.query_raw(query, *args)

        if not results:
            return None

        return results[0]

    @overload
    async def query_raw(self, query: str, *args: Any) -> Any:
        ...

    @overload
    async def query_raw(self, query: str, *args: Any, model: Type[BaseModelT]) -> List[BaseModelT]:
        ...

    async def query_raw(
        self, query: str, *args: Any, model: Optional[Type[BaseModelT]] = None
    ) -> Union[List[BaseModelT], Any]:
        resp = await self._execute(
            operation='mutation',
            method='queryRaw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )
        result = resp['data']['result']
        if model is not None:
            return [model.parse_obj(r) for r in result]
        return result

    def batch_(self) -> 'Batch':
        """Returns a context manager for grouping write queries into a single transaction."""
        return Batch(client=self)

    # TODO: don't return Any
    async def _execute(
        self,
        method: str,
        operation: str,
        arguments: Dict[str, Any],
        model: Optional[str] = None,
        root_selection: Optional[List[str]] = None
    ) -> Any:
        builder = QueryBuilder(
            operation=operation,
            method=method,
            model=model,
            arguments=arguments,
            root_selection=root_selection,
        )
        return await self._engine.query(builder.build())

    def _create_engine(self, dml: str = SCHEMA) -> AbstractEngine:
        if ENGINE_TYPE == EngineType.binary:
            return QueryEngine(dml=dml, log_queries=self._log_queries, **self._http_config)

        raise NotImplementedError(f'Unsupported engine type: {ENGINE_TYPE}')

    @property
    def _engine_class(self) -> Type[AbstractEngine]:
        if ENGINE_TYPE == EngineType.binary:
            return QueryEngine
        else:  # pragma: no cover
            raise RuntimeError(f'Unhandled engine type: {ENGINE_TYPE}')

    @property
    def _engine(self) -> AbstractEngine:
        engine = self.__engine
        if engine is None:
            raise errors.ClientNotConnectedError()
        return engine


# TODO: this should return the results as well
# TODO: don't require copy-pasting arguments between actions and batch actions
class Batch:
    server: 'ServerBatchActions'
    player: 'PlayerBatchActions'
    version: 'VersionBatchActions'

    def __init__(self, client: Prisma) -> None:
        self.__client = client
        self.__queries: List[str] = []
        self._active_provider = client._active_provider
        self.server = ServerBatchActions(self)
        self.player = PlayerBatchActions(self)
        self.version = VersionBatchActions(self)

    def _add(self, **kwargs: Any) -> None:
        builder = QueryBuilder(**kwargs)
        self.__queries.append(builder.build_query())

    async def commit(self) -> None:
        """Execute the queries"""
        # TODO: normalise this, we should still call client._execute
        from .builder import dumps

        queries = self.__queries
        self.__queries = []

        payload = {
            'batch': [
                {
                    'query': query,
                    'variables': {},
                }
                for query in queries
            ],
            'transaction': True,
        }
        await self.__client._engine.query(dumps(payload))

    async def __aenter__(self) -> 'Batch':
        return self

    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if exc is None:
            await self.commit()


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ServerBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ServerCreateInput,
        include: Optional[types.ServerInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='Server',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ServerCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='Server',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ServerWhereUniqueInput,
        include: Optional[types.ServerInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='Server',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ServerUpdateInput,
        where: types.ServerWhereUniqueInput,
        include: Optional[types.ServerInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='Server',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ServerWhereUniqueInput,
        data: types.ServerUpsertInput,
        include: Optional[types.ServerInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='Server',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ServerUpdateManyMutationInput,
        where: types.ServerWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='Server',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ServerWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='Server',
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class PlayerBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.PlayerCreateInput,
        include: Optional[types.PlayerInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='Player',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.PlayerCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='Player',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.PlayerWhereUniqueInput,
        include: Optional[types.PlayerInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='Player',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.PlayerUpdateInput,
        where: types.PlayerWhereUniqueInput,
        include: Optional[types.PlayerInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='Player',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.PlayerWhereUniqueInput,
        data: types.PlayerUpsertInput,
        include: Optional[types.PlayerInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='Player',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.PlayerUpdateManyMutationInput,
        where: types.PlayerWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='Player',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.PlayerWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='Player',
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class VersionBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.VersionCreateInput,
        include: Optional[types.VersionInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='Version',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.VersionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='Version',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.VersionWhereUniqueInput,
        include: Optional[types.VersionInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='Version',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.VersionUpdateInput,
        where: types.VersionWhereUniqueInput,
        include: Optional[types.VersionInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='Version',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.VersionWhereUniqueInput,
        data: types.VersionUpsertInput,
        include: Optional[types.VersionInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='Version',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.VersionUpdateManyMutationInput,
        where: types.VersionWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='Version',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.VersionWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='Version',
            arguments={'where': where},
            root_selection=['count'],
        )



Client = Prisma