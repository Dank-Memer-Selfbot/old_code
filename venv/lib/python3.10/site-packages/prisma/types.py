# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal

# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[str]]


class _StringListFilterHasInput(TypedDict):
    has: str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[str]


class _StringListUpdatePush(TypedDict):
    push: List[str]


StringListUpdate = Union[
    List[str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[bool]


BooleanListUpdate = Union[
    List[bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[int]]


class _IntListFilterHasInput(TypedDict):
    has: int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[int]


class _IntListUpdatePush(TypedDict):
    push: List[int]


IntListUpdate = Union[
    List[int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[int]]


class _BigIntListFilterHasInput(TypedDict):
    has: int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[int]


class _BigIntListUpdatePush(TypedDict):
    push: List[int]


BigIntListUpdate = Union[
    List[int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[float]]


class _FloatListFilterHasInput(TypedDict):
    has: float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[float]


class _FloatListUpdatePush(TypedDict):
    push: List[float]


FloatListUpdate = Union[
    List[float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Server types

class ServerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Server create method"""
    id: int
    version: 'VersionCreateNestedWithoutRelationsInput'
    players: 'PlayerCreateManyNestedWithoutRelationsInput'
    minmax: 'MaximumCreateNestedWithoutRelationsInput'


class ServerCreateInput(ServerOptionalCreateInput):
    """Required arguments to the Server create method"""
    ip_address: str
    description: str
    favicon: str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ServerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Server create method, without relations"""
    id: int


class ServerCreateWithoutRelationsInput(ServerOptionalCreateWithoutRelationsInput):
    """Required arguments to the Server create method, without relations"""
    ip_address: str
    description: str
    favicon: str


class ServerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ServerCreateWithoutRelationsInput'
    connect: 'ServerWhereUniqueInput'


class ServerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ServerCreateWithoutRelationsInput', List['ServerCreateWithoutRelationsInput']]
    connect: Union['ServerWhereUniqueInput', List['ServerWhereUniqueInput']]


_ServerWhereUnique_id_Input = TypedDict(
    '_ServerWhereUnique_id_Input',
    {
        'id': 'int',
    },
    total=True
)

_ServerWhereUnique_ip_address_Input = TypedDict(
    '_ServerWhereUnique_ip_address_Input',
    {
        'ip_address': 'str',
    },
    total=True
)

ServerWhereUniqueInput = Union[
    '_ServerWhereUnique_id_Input',
    '_ServerWhereUnique_ip_address_Input',
]


class ServerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, int]
    ip_address: str
    description: str
    favicon: str
    version: 'VersionUpdateOneWithoutRelationsInput'
    players: 'PlayerUpdateManyWithoutRelationsInput'
    minmax: 'MaximumUpdateOneWithoutRelationsInput'


class ServerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, int]
    ip_address: str
    description: str
    favicon: str


class ServerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ServerCreateWithoutRelationsInput']
    connect: List['ServerWhereUniqueInput']
    set: List['ServerWhereUniqueInput']
    disconnect: List['ServerWhereUniqueInput']
    delete: List['ServerWhereUniqueInput']

    # TODO
    # update: List['ServerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ServerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ServerScalarWhereInput']
    # upsert: List['ServerUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ServerCreateOrConnectWithoutRelationsInput']


class ServerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ServerCreateWithoutRelationsInput'
    connect: 'ServerWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ServerUpdateInput'
    # upsert: 'ServerUpsertWithoutRelationsInput'
    # connectOrCreate: 'ServerCreateOrConnectWithoutRelationsInput'


class ServerUpsertInput(TypedDict):
    create: 'ServerCreateInput'
    update: 'ServerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Server_id_OrderByInput = TypedDict(
    '_Server_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Server_ip_address_OrderByInput = TypedDict(
    '_Server_ip_address_OrderByInput',
    {
        'ip_address': 'SortOrder',
    },
    total=True
)

_Server_description_OrderByInput = TypedDict(
    '_Server_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Server_favicon_OrderByInput = TypedDict(
    '_Server_favicon_OrderByInput',
    {
        'favicon': 'SortOrder',
    },
    total=True
)

_Server_versionId_OrderByInput = TypedDict(
    '_Server_versionId_OrderByInput',
    {
        'versionId': 'SortOrder',
    },
    total=True
)

_Server_maximumId_OrderByInput = TypedDict(
    '_Server_maximumId_OrderByInput',
    {
        'maximumId': 'SortOrder',
    },
    total=True
)

ServerOrderByInput = Union[
    '_Server_id_OrderByInput',
    '_Server_ip_address_OrderByInput',
    '_Server_description_OrderByInput',
    '_Server_favicon_OrderByInput',
    '_Server_versionId_OrderByInput',
    '_Server_maximumId_OrderByInput',
]



# recursive Server types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ServerRelationFilter = TypedDict(
    'ServerRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ServerListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ServerInclude(TypedDict, total=False):
    """Server relational arguments"""
    version: Union[bool, 'VersionArgsFromServer']
    players: Union[bool, 'FindManyPlayerArgsFromServer']
    minmax: Union[bool, 'MaximumArgsFromServer']


    

class ServerIncludeFromServer(TypedDict, total=False):
    """Relational arguments for Server"""
    version: Union[bool, 'VersionArgsFromServerRecursive1']
    players: Union[bool, 'FindManyPlayerArgsFromServerRecursive1']
    minmax: Union[bool, 'MaximumArgsFromServerRecursive1']


class ServerIncludeFromServerRecursive1(TypedDict, total=False):
    """Relational arguments for Server"""
    version: Union[bool, 'VersionArgsFromServerRecursive2']
    players: Union[bool, 'FindManyPlayerArgsFromServerRecursive2']
    minmax: Union[bool, 'MaximumArgsFromServerRecursive2']


class ServerIncludeFromServerRecursive2(TypedDict, total=False):
    """Relational arguments for Server"""
    version: Union[bool, 'VersionArgsFromServerRecursive3']
    players: Union[bool, 'FindManyPlayerArgsFromServerRecursive3']
    minmax: Union[bool, 'MaximumArgsFromServerRecursive3']


class ServerIncludeFromServerRecursive3(TypedDict, total=False):
    """Relational arguments for Server"""
    version: Union[bool, 'VersionArgsFromServerRecursive4']
    players: Union[bool, 'FindManyPlayerArgsFromServerRecursive4']
    minmax: Union[bool, 'MaximumArgsFromServerRecursive4']


class ServerIncludeFromServerRecursive4(TypedDict, total=False):
    """Relational arguments for Server"""

    

class ServerArgsFromServer(TypedDict, total=False):
    """Arguments for Server"""
    include: 'ServerIncludeFromServerRecursive1'


class ServerArgsFromServerRecursive1(TypedDict, total=False):
    """Arguments for Server"""
    include: 'ServerIncludeFromServerRecursive2'


class ServerArgsFromServerRecursive2(TypedDict, total=False):
    """Arguments for Server"""
    include: 'ServerIncludeFromServerRecursive3'


class ServerArgsFromServerRecursive3(TypedDict, total=False):
    """Arguments for Server"""
    include: 'ServerIncludeFromServerRecursive4'


class ServerArgsFromServerRecursive4(TypedDict, total=False):
    """Arguments for Server"""
    
    

class FindManyServerArgsFromServer(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive1'


class FindManyServerArgsFromServerRecursive1(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive2'


class FindManyServerArgsFromServerRecursive2(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive3'


class FindManyServerArgsFromServerRecursive3(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive4'


class FindManyServerArgsFromServerRecursive4(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    
    

class PlayerIncludeFromServer(TypedDict, total=False):
    """Relational arguments for Server"""
    Server: Union[bool, 'ServerArgsFromServerRecursive1']


class PlayerIncludeFromServerRecursive1(TypedDict, total=False):
    """Relational arguments for Server"""
    Server: Union[bool, 'ServerArgsFromServerRecursive2']


class PlayerIncludeFromServerRecursive2(TypedDict, total=False):
    """Relational arguments for Server"""
    Server: Union[bool, 'ServerArgsFromServerRecursive3']


class PlayerIncludeFromServerRecursive3(TypedDict, total=False):
    """Relational arguments for Server"""
    Server: Union[bool, 'ServerArgsFromServerRecursive4']


class PlayerIncludeFromServerRecursive4(TypedDict, total=False):
    """Relational arguments for Server"""

    

class PlayerArgsFromServer(TypedDict, total=False):
    """Arguments for Server"""
    include: 'PlayerIncludeFromPlayerRecursive1'


class PlayerArgsFromServerRecursive1(TypedDict, total=False):
    """Arguments for Server"""
    include: 'PlayerIncludeFromPlayerRecursive2'


class PlayerArgsFromServerRecursive2(TypedDict, total=False):
    """Arguments for Server"""
    include: 'PlayerIncludeFromPlayerRecursive3'


class PlayerArgsFromServerRecursive3(TypedDict, total=False):
    """Arguments for Server"""
    include: 'PlayerIncludeFromPlayerRecursive4'


class PlayerArgsFromServerRecursive4(TypedDict, total=False):
    """Arguments for Server"""
    
    

class FindManyPlayerArgsFromServer(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive1'


class FindManyPlayerArgsFromServerRecursive1(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive2'


class FindManyPlayerArgsFromServerRecursive2(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive3'


class FindManyPlayerArgsFromServerRecursive3(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive4'


class FindManyPlayerArgsFromServerRecursive4(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    
    

class VersionIncludeFromServer(TypedDict, total=False):
    """Relational arguments for Server"""
    Server: Union[bool, 'FindManyServerArgsFromServerRecursive1']


class VersionIncludeFromServerRecursive1(TypedDict, total=False):
    """Relational arguments for Server"""
    Server: Union[bool, 'FindManyServerArgsFromServerRecursive2']


class VersionIncludeFromServerRecursive2(TypedDict, total=False):
    """Relational arguments for Server"""
    Server: Union[bool, 'FindManyServerArgsFromServerRecursive3']


class VersionIncludeFromServerRecursive3(TypedDict, total=False):
    """Relational arguments for Server"""
    Server: Union[bool, 'FindManyServerArgsFromServerRecursive4']


class VersionIncludeFromServerRecursive4(TypedDict, total=False):
    """Relational arguments for Server"""

    

class VersionArgsFromServer(TypedDict, total=False):
    """Arguments for Server"""
    include: 'VersionIncludeFromVersionRecursive1'


class VersionArgsFromServerRecursive1(TypedDict, total=False):
    """Arguments for Server"""
    include: 'VersionIncludeFromVersionRecursive2'


class VersionArgsFromServerRecursive2(TypedDict, total=False):
    """Arguments for Server"""
    include: 'VersionIncludeFromVersionRecursive3'


class VersionArgsFromServerRecursive3(TypedDict, total=False):
    """Arguments for Server"""
    include: 'VersionIncludeFromVersionRecursive4'


class VersionArgsFromServerRecursive4(TypedDict, total=False):
    """Arguments for Server"""
    
    

class FindManyVersionArgsFromServer(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive1'


class FindManyVersionArgsFromServerRecursive1(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive2'


class FindManyVersionArgsFromServerRecursive2(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive3'


class FindManyVersionArgsFromServerRecursive3(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive4'


class FindManyVersionArgsFromServerRecursive4(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    
    

class MaximumIncludeFromServer(TypedDict, total=False):
    """Relational arguments for Server"""
    Server: Union[bool, 'FindManyServerArgsFromServerRecursive1']


class MaximumIncludeFromServerRecursive1(TypedDict, total=False):
    """Relational arguments for Server"""
    Server: Union[bool, 'FindManyServerArgsFromServerRecursive2']


class MaximumIncludeFromServerRecursive2(TypedDict, total=False):
    """Relational arguments for Server"""
    Server: Union[bool, 'FindManyServerArgsFromServerRecursive3']


class MaximumIncludeFromServerRecursive3(TypedDict, total=False):
    """Relational arguments for Server"""
    Server: Union[bool, 'FindManyServerArgsFromServerRecursive4']


class MaximumIncludeFromServerRecursive4(TypedDict, total=False):
    """Relational arguments for Server"""

    

class MaximumArgsFromServer(TypedDict, total=False):
    """Arguments for Server"""
    include: 'MaximumIncludeFromMaximumRecursive1'


class MaximumArgsFromServerRecursive1(TypedDict, total=False):
    """Arguments for Server"""
    include: 'MaximumIncludeFromMaximumRecursive2'


class MaximumArgsFromServerRecursive2(TypedDict, total=False):
    """Arguments for Server"""
    include: 'MaximumIncludeFromMaximumRecursive3'


class MaximumArgsFromServerRecursive3(TypedDict, total=False):
    """Arguments for Server"""
    include: 'MaximumIncludeFromMaximumRecursive4'


class MaximumArgsFromServerRecursive4(TypedDict, total=False):
    """Arguments for Server"""
    
    

class FindManyMaximumArgsFromServer(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive1'


class FindManyMaximumArgsFromServerRecursive1(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive2'


class FindManyMaximumArgsFromServerRecursive2(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive3'


class FindManyMaximumArgsFromServerRecursive3(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive4'


class FindManyMaximumArgsFromServerRecursive4(TypedDict, total=False):
    """Arguments for Server"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    


FindManyServerArgs = FindManyServerArgsFromServer
FindFirstServerArgs = FindManyServerArgsFromServer


    

class ServerWhereInput(TypedDict, total=False):
    """Server arguments for searching"""
    id: Union[int, 'types.IntFilter']
    ip_address: Union[str, 'types.StringFilter']
    description: Union[str, 'types.StringFilter']
    favicon: Union[str, 'types.StringFilter']
    version: 'VersionRelationFilter'
    players: 'PlayerListRelationFilter'
    minmax: 'MaximumRelationFilter'
    versionId: Union[int, 'types.IntFilter']
    maximumId: Union[int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ServerWhereInputRecursive1', List['ServerWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ServerWhereInputRecursive1']
    OR: List['ServerWhereInputRecursive1']
    NOT: List['ServerWhereInputRecursive1']


class ServerWhereInputRecursive1(TypedDict, total=False):
    """Server arguments for searching"""
    id: Union[int, 'types.IntFilter']
    ip_address: Union[str, 'types.StringFilter']
    description: Union[str, 'types.StringFilter']
    favicon: Union[str, 'types.StringFilter']
    version: 'VersionRelationFilter'
    players: 'PlayerListRelationFilter'
    minmax: 'MaximumRelationFilter'
    versionId: Union[int, 'types.IntFilter']
    maximumId: Union[int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ServerWhereInputRecursive2', List['ServerWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ServerWhereInputRecursive2']
    OR: List['ServerWhereInputRecursive2']
    NOT: List['ServerWhereInputRecursive2']


class ServerWhereInputRecursive2(TypedDict, total=False):
    """Server arguments for searching"""
    id: Union[int, 'types.IntFilter']
    ip_address: Union[str, 'types.StringFilter']
    description: Union[str, 'types.StringFilter']
    favicon: Union[str, 'types.StringFilter']
    version: 'VersionRelationFilter'
    players: 'PlayerListRelationFilter'
    minmax: 'MaximumRelationFilter'
    versionId: Union[int, 'types.IntFilter']
    maximumId: Union[int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ServerWhereInputRecursive3', List['ServerWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ServerWhereInputRecursive3']
    OR: List['ServerWhereInputRecursive3']
    NOT: List['ServerWhereInputRecursive3']


class ServerWhereInputRecursive3(TypedDict, total=False):
    """Server arguments for searching"""
    id: Union[int, 'types.IntFilter']
    ip_address: Union[str, 'types.StringFilter']
    description: Union[str, 'types.StringFilter']
    favicon: Union[str, 'types.StringFilter']
    version: 'VersionRelationFilter'
    players: 'PlayerListRelationFilter'
    minmax: 'MaximumRelationFilter'
    versionId: Union[int, 'types.IntFilter']
    maximumId: Union[int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ServerWhereInputRecursive4', List['ServerWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ServerWhereInputRecursive4']
    OR: List['ServerWhereInputRecursive4']
    NOT: List['ServerWhereInputRecursive4']


class ServerWhereInputRecursive4(TypedDict, total=False):
    """Server arguments for searching"""
    id: Union[int, 'types.IntFilter']
    ip_address: Union[str, 'types.StringFilter']
    description: Union[str, 'types.StringFilter']
    favicon: Union[str, 'types.StringFilter']
    version: 'VersionRelationFilter'
    players: 'PlayerListRelationFilter'
    minmax: 'MaximumRelationFilter'
    versionId: Union[int, 'types.IntFilter']
    maximumId: Union[int, 'types.IntFilter']



# aggregate Server types


    

class ServerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Server arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    ip_address: Union[str, 'types.StringWithAggregatesFilter']
    description: Union[str, 'types.StringWithAggregatesFilter']
    favicon: Union[str, 'types.StringWithAggregatesFilter']
    versionId: Union[int, 'types.IntWithAggregatesFilter']
    maximumId: Union[int, 'types.IntWithAggregatesFilter']

    AND: List['ServerScalarWhereWithAggregatesInputRecursive1']
    OR: List['ServerScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ServerScalarWhereWithAggregatesInputRecursive1']


class ServerScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Server arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    ip_address: Union[str, 'types.StringWithAggregatesFilter']
    description: Union[str, 'types.StringWithAggregatesFilter']
    favicon: Union[str, 'types.StringWithAggregatesFilter']
    versionId: Union[int, 'types.IntWithAggregatesFilter']
    maximumId: Union[int, 'types.IntWithAggregatesFilter']

    AND: List['ServerScalarWhereWithAggregatesInputRecursive2']
    OR: List['ServerScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ServerScalarWhereWithAggregatesInputRecursive2']


class ServerScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Server arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    ip_address: Union[str, 'types.StringWithAggregatesFilter']
    description: Union[str, 'types.StringWithAggregatesFilter']
    favicon: Union[str, 'types.StringWithAggregatesFilter']
    versionId: Union[int, 'types.IntWithAggregatesFilter']
    maximumId: Union[int, 'types.IntWithAggregatesFilter']

    AND: List['ServerScalarWhereWithAggregatesInputRecursive3']
    OR: List['ServerScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ServerScalarWhereWithAggregatesInputRecursive3']


class ServerScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Server arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    ip_address: Union[str, 'types.StringWithAggregatesFilter']
    description: Union[str, 'types.StringWithAggregatesFilter']
    favicon: Union[str, 'types.StringWithAggregatesFilter']
    versionId: Union[int, 'types.IntWithAggregatesFilter']
    maximumId: Union[int, 'types.IntWithAggregatesFilter']

    AND: List['ServerScalarWhereWithAggregatesInputRecursive4']
    OR: List['ServerScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ServerScalarWhereWithAggregatesInputRecursive4']


class ServerScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Server arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    ip_address: Union[str, 'types.StringWithAggregatesFilter']
    description: Union[str, 'types.StringWithAggregatesFilter']
    favicon: Union[str, 'types.StringWithAggregatesFilter']
    versionId: Union[int, 'types.IntWithAggregatesFilter']
    maximumId: Union[int, 'types.IntWithAggregatesFilter']



class ServerGroupByOutput(TypedDict, total=False):
    id: int
    ip_address: str
    description: str
    favicon: str
    versionId: int
    maximumId: int
    _sum: 'ServerSumAggregateOutput'
    _avg: 'ServerAvgAggregateOutput'
    _min: 'ServerMinAggregateOutput'
    _max: 'ServerMaxAggregateOutput'
    _count: 'ServerCountAggregateOutput'


class ServerAvgAggregateOutput(TypedDict, total=False):
    """Server output for aggregating averages"""
    id: float
    versionId: float
    maximumId: float


class ServerSumAggregateOutput(TypedDict, total=False):
    """Server output for aggregating sums"""
    id: int
    versionId: int
    maximumId: int


class ServerScalarAggregateOutput(TypedDict, total=False):
    """Server output including scalar fields"""
    id: int
    ip_address: str
    description: str
    favicon: str
    versionId: int
    maximumId: int


ServerMinAggregateOutput = ServerScalarAggregateOutput
ServerMaxAggregateOutput = ServerScalarAggregateOutput


class ServerMaxAggregateInput(TypedDict, total=False):
    """Server input for aggregating by max"""
    id: bool
    ip_address: bool
    description: bool
    favicon: bool
    versionId: bool
    maximumId: bool


class ServerMinAggregateInput(TypedDict, total=False):
    """Server input for aggregating by min"""
    id: bool
    ip_address: bool
    description: bool
    favicon: bool
    versionId: bool
    maximumId: bool


class ServerNumberAggregateInput(TypedDict, total=False):
    """Server input for aggregating numbers"""
    id: bool
    versionId: bool
    maximumId: bool


ServerAvgAggregateInput = ServerNumberAggregateInput
ServerSumAggregateInput = ServerNumberAggregateInput


ServerCountAggregateInput = TypedDict(
    'ServerCountAggregateInput',
    {
        'id': bool,
        'ip_address': bool,
        'description': bool,
        'favicon': bool,
        'versionId': bool,
        'maximumId': bool,
        '_all': bool,
    },
    total=False,
)

ServerCountAggregateOutput = TypedDict(
    'ServerCountAggregateOutput',
    {
        'id': int,
        'ip_address': int,
        'description': int,
        'favicon': int,
        'versionId': int,
        'maximumId': int,
        '_all': int,
    },
    total=False,
)


ServerKeys = Literal[
    'id',
    'ip_address',
    'description',
    'favicon',
    'version',
    'players',
    'minmax',
    'versionId',
    'maximumId',
]
ServerScalarFieldKeys = Literal[
    'id',
    'ip_address',
    'description',
    'favicon',
    'versionId',
    'maximumId',
]
ServerScalarFieldKeysT = TypeVar('ServerScalarFieldKeysT', bound=ServerScalarFieldKeys)

ServerRelationalFieldKeys = Literal[
        'version',
        'players',
        'minmax',
    ]

# Player types

class PlayerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Player create method"""
    id: int
    Server: 'ServerCreateNestedWithoutRelationsInput'


class PlayerCreateInput(PlayerOptionalCreateInput):
    """Required arguments to the Player create method"""
    uuid: str
    username: str
    authenticated: bool


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PlayerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Player create method, without relations"""
    id: int


class PlayerCreateWithoutRelationsInput(PlayerOptionalCreateWithoutRelationsInput):
    """Required arguments to the Player create method, without relations"""
    uuid: str
    username: str
    authenticated: bool


class PlayerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PlayerCreateWithoutRelationsInput'
    connect: 'PlayerWhereUniqueInput'


class PlayerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PlayerCreateWithoutRelationsInput', List['PlayerCreateWithoutRelationsInput']]
    connect: Union['PlayerWhereUniqueInput', List['PlayerWhereUniqueInput']]


_PlayerWhereUnique_id_Input = TypedDict(
    '_PlayerWhereUnique_id_Input',
    {
        'id': 'int',
    },
    total=True
)

PlayerWhereUniqueInput = _PlayerWhereUnique_id_Input


class PlayerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, int]
    uuid: str
    username: str
    authenticated: bool
    Server: 'ServerUpdateOneWithoutRelationsInput'


class PlayerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, int]
    uuid: str
    username: str
    authenticated: bool


class PlayerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PlayerCreateWithoutRelationsInput']
    connect: List['PlayerWhereUniqueInput']
    set: List['PlayerWhereUniqueInput']
    disconnect: List['PlayerWhereUniqueInput']
    delete: List['PlayerWhereUniqueInput']

    # TODO
    # update: List['PlayerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PlayerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PlayerScalarWhereInput']
    # upsert: List['PlayerUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['PlayerCreateOrConnectWithoutRelationsInput']


class PlayerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PlayerCreateWithoutRelationsInput'
    connect: 'PlayerWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PlayerUpdateInput'
    # upsert: 'PlayerUpsertWithoutRelationsInput'
    # connectOrCreate: 'PlayerCreateOrConnectWithoutRelationsInput'


class PlayerUpsertInput(TypedDict):
    create: 'PlayerCreateInput'
    update: 'PlayerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Player_id_OrderByInput = TypedDict(
    '_Player_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Player_uuid_OrderByInput = TypedDict(
    '_Player_uuid_OrderByInput',
    {
        'uuid': 'SortOrder',
    },
    total=True
)

_Player_username_OrderByInput = TypedDict(
    '_Player_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_Player_authenticated_OrderByInput = TypedDict(
    '_Player_authenticated_OrderByInput',
    {
        'authenticated': 'SortOrder',
    },
    total=True
)

_Player_serverId_OrderByInput = TypedDict(
    '_Player_serverId_OrderByInput',
    {
        'serverId': 'SortOrder',
    },
    total=True
)

PlayerOrderByInput = Union[
    '_Player_id_OrderByInput',
    '_Player_uuid_OrderByInput',
    '_Player_username_OrderByInput',
    '_Player_authenticated_OrderByInput',
    '_Player_serverId_OrderByInput',
]



# recursive Player types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PlayerRelationFilter = TypedDict(
    'PlayerRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PlayerListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PlayerInclude(TypedDict, total=False):
    """Player relational arguments"""
    Server: Union[bool, 'ServerArgsFromPlayer']


    

class ServerIncludeFromPlayer(TypedDict, total=False):
    """Relational arguments for Player"""
    version: Union[bool, 'VersionArgsFromPlayerRecursive1']
    players: Union[bool, 'FindManyPlayerArgsFromPlayerRecursive1']
    minmax: Union[bool, 'MaximumArgsFromPlayerRecursive1']


class ServerIncludeFromPlayerRecursive1(TypedDict, total=False):
    """Relational arguments for Player"""
    version: Union[bool, 'VersionArgsFromPlayerRecursive2']
    players: Union[bool, 'FindManyPlayerArgsFromPlayerRecursive2']
    minmax: Union[bool, 'MaximumArgsFromPlayerRecursive2']


class ServerIncludeFromPlayerRecursive2(TypedDict, total=False):
    """Relational arguments for Player"""
    version: Union[bool, 'VersionArgsFromPlayerRecursive3']
    players: Union[bool, 'FindManyPlayerArgsFromPlayerRecursive3']
    minmax: Union[bool, 'MaximumArgsFromPlayerRecursive3']


class ServerIncludeFromPlayerRecursive3(TypedDict, total=False):
    """Relational arguments for Player"""
    version: Union[bool, 'VersionArgsFromPlayerRecursive4']
    players: Union[bool, 'FindManyPlayerArgsFromPlayerRecursive4']
    minmax: Union[bool, 'MaximumArgsFromPlayerRecursive4']


class ServerIncludeFromPlayerRecursive4(TypedDict, total=False):
    """Relational arguments for Player"""

    

class ServerArgsFromPlayer(TypedDict, total=False):
    """Arguments for Player"""
    include: 'ServerIncludeFromServerRecursive1'


class ServerArgsFromPlayerRecursive1(TypedDict, total=False):
    """Arguments for Player"""
    include: 'ServerIncludeFromServerRecursive2'


class ServerArgsFromPlayerRecursive2(TypedDict, total=False):
    """Arguments for Player"""
    include: 'ServerIncludeFromServerRecursive3'


class ServerArgsFromPlayerRecursive3(TypedDict, total=False):
    """Arguments for Player"""
    include: 'ServerIncludeFromServerRecursive4'


class ServerArgsFromPlayerRecursive4(TypedDict, total=False):
    """Arguments for Player"""
    
    

class FindManyServerArgsFromPlayer(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive1'


class FindManyServerArgsFromPlayerRecursive1(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive2'


class FindManyServerArgsFromPlayerRecursive2(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive3'


class FindManyServerArgsFromPlayerRecursive3(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive4'


class FindManyServerArgsFromPlayerRecursive4(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    
    

class PlayerIncludeFromPlayer(TypedDict, total=False):
    """Relational arguments for Player"""
    Server: Union[bool, 'ServerArgsFromPlayerRecursive1']


class PlayerIncludeFromPlayerRecursive1(TypedDict, total=False):
    """Relational arguments for Player"""
    Server: Union[bool, 'ServerArgsFromPlayerRecursive2']


class PlayerIncludeFromPlayerRecursive2(TypedDict, total=False):
    """Relational arguments for Player"""
    Server: Union[bool, 'ServerArgsFromPlayerRecursive3']


class PlayerIncludeFromPlayerRecursive3(TypedDict, total=False):
    """Relational arguments for Player"""
    Server: Union[bool, 'ServerArgsFromPlayerRecursive4']


class PlayerIncludeFromPlayerRecursive4(TypedDict, total=False):
    """Relational arguments for Player"""

    

class PlayerArgsFromPlayer(TypedDict, total=False):
    """Arguments for Player"""
    include: 'PlayerIncludeFromPlayerRecursive1'


class PlayerArgsFromPlayerRecursive1(TypedDict, total=False):
    """Arguments for Player"""
    include: 'PlayerIncludeFromPlayerRecursive2'


class PlayerArgsFromPlayerRecursive2(TypedDict, total=False):
    """Arguments for Player"""
    include: 'PlayerIncludeFromPlayerRecursive3'


class PlayerArgsFromPlayerRecursive3(TypedDict, total=False):
    """Arguments for Player"""
    include: 'PlayerIncludeFromPlayerRecursive4'


class PlayerArgsFromPlayerRecursive4(TypedDict, total=False):
    """Arguments for Player"""
    
    

class FindManyPlayerArgsFromPlayer(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive1'


class FindManyPlayerArgsFromPlayerRecursive1(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive2'


class FindManyPlayerArgsFromPlayerRecursive2(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive3'


class FindManyPlayerArgsFromPlayerRecursive3(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive4'


class FindManyPlayerArgsFromPlayerRecursive4(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    
    

class VersionIncludeFromPlayer(TypedDict, total=False):
    """Relational arguments for Player"""
    Server: Union[bool, 'FindManyServerArgsFromPlayerRecursive1']


class VersionIncludeFromPlayerRecursive1(TypedDict, total=False):
    """Relational arguments for Player"""
    Server: Union[bool, 'FindManyServerArgsFromPlayerRecursive2']


class VersionIncludeFromPlayerRecursive2(TypedDict, total=False):
    """Relational arguments for Player"""
    Server: Union[bool, 'FindManyServerArgsFromPlayerRecursive3']


class VersionIncludeFromPlayerRecursive3(TypedDict, total=False):
    """Relational arguments for Player"""
    Server: Union[bool, 'FindManyServerArgsFromPlayerRecursive4']


class VersionIncludeFromPlayerRecursive4(TypedDict, total=False):
    """Relational arguments for Player"""

    

class VersionArgsFromPlayer(TypedDict, total=False):
    """Arguments for Player"""
    include: 'VersionIncludeFromVersionRecursive1'


class VersionArgsFromPlayerRecursive1(TypedDict, total=False):
    """Arguments for Player"""
    include: 'VersionIncludeFromVersionRecursive2'


class VersionArgsFromPlayerRecursive2(TypedDict, total=False):
    """Arguments for Player"""
    include: 'VersionIncludeFromVersionRecursive3'


class VersionArgsFromPlayerRecursive3(TypedDict, total=False):
    """Arguments for Player"""
    include: 'VersionIncludeFromVersionRecursive4'


class VersionArgsFromPlayerRecursive4(TypedDict, total=False):
    """Arguments for Player"""
    
    

class FindManyVersionArgsFromPlayer(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive1'


class FindManyVersionArgsFromPlayerRecursive1(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive2'


class FindManyVersionArgsFromPlayerRecursive2(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive3'


class FindManyVersionArgsFromPlayerRecursive3(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive4'


class FindManyVersionArgsFromPlayerRecursive4(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    
    

class MaximumIncludeFromPlayer(TypedDict, total=False):
    """Relational arguments for Player"""
    Server: Union[bool, 'FindManyServerArgsFromPlayerRecursive1']


class MaximumIncludeFromPlayerRecursive1(TypedDict, total=False):
    """Relational arguments for Player"""
    Server: Union[bool, 'FindManyServerArgsFromPlayerRecursive2']


class MaximumIncludeFromPlayerRecursive2(TypedDict, total=False):
    """Relational arguments for Player"""
    Server: Union[bool, 'FindManyServerArgsFromPlayerRecursive3']


class MaximumIncludeFromPlayerRecursive3(TypedDict, total=False):
    """Relational arguments for Player"""
    Server: Union[bool, 'FindManyServerArgsFromPlayerRecursive4']


class MaximumIncludeFromPlayerRecursive4(TypedDict, total=False):
    """Relational arguments for Player"""

    

class MaximumArgsFromPlayer(TypedDict, total=False):
    """Arguments for Player"""
    include: 'MaximumIncludeFromMaximumRecursive1'


class MaximumArgsFromPlayerRecursive1(TypedDict, total=False):
    """Arguments for Player"""
    include: 'MaximumIncludeFromMaximumRecursive2'


class MaximumArgsFromPlayerRecursive2(TypedDict, total=False):
    """Arguments for Player"""
    include: 'MaximumIncludeFromMaximumRecursive3'


class MaximumArgsFromPlayerRecursive3(TypedDict, total=False):
    """Arguments for Player"""
    include: 'MaximumIncludeFromMaximumRecursive4'


class MaximumArgsFromPlayerRecursive4(TypedDict, total=False):
    """Arguments for Player"""
    
    

class FindManyMaximumArgsFromPlayer(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive1'


class FindManyMaximumArgsFromPlayerRecursive1(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive2'


class FindManyMaximumArgsFromPlayerRecursive2(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive3'


class FindManyMaximumArgsFromPlayerRecursive3(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive4'


class FindManyMaximumArgsFromPlayerRecursive4(TypedDict, total=False):
    """Arguments for Player"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    


FindManyPlayerArgs = FindManyPlayerArgsFromPlayer
FindFirstPlayerArgs = FindManyPlayerArgsFromPlayer


    

class PlayerWhereInput(TypedDict, total=False):
    """Player arguments for searching"""
    id: Union[int, 'types.IntFilter']
    uuid: Union[str, 'types.StringFilter']
    username: Union[str, 'types.StringFilter']
    authenticated: Union[bool, 'types.BooleanFilter']
    Server: 'ServerRelationFilter'
    serverId: Union[int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['PlayerWhereInputRecursive1', List['PlayerWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PlayerWhereInputRecursive1']
    OR: List['PlayerWhereInputRecursive1']
    NOT: List['PlayerWhereInputRecursive1']


class PlayerWhereInputRecursive1(TypedDict, total=False):
    """Player arguments for searching"""
    id: Union[int, 'types.IntFilter']
    uuid: Union[str, 'types.StringFilter']
    username: Union[str, 'types.StringFilter']
    authenticated: Union[bool, 'types.BooleanFilter']
    Server: 'ServerRelationFilter'
    serverId: Union[int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['PlayerWhereInputRecursive2', List['PlayerWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PlayerWhereInputRecursive2']
    OR: List['PlayerWhereInputRecursive2']
    NOT: List['PlayerWhereInputRecursive2']


class PlayerWhereInputRecursive2(TypedDict, total=False):
    """Player arguments for searching"""
    id: Union[int, 'types.IntFilter']
    uuid: Union[str, 'types.StringFilter']
    username: Union[str, 'types.StringFilter']
    authenticated: Union[bool, 'types.BooleanFilter']
    Server: 'ServerRelationFilter'
    serverId: Union[int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['PlayerWhereInputRecursive3', List['PlayerWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PlayerWhereInputRecursive3']
    OR: List['PlayerWhereInputRecursive3']
    NOT: List['PlayerWhereInputRecursive3']


class PlayerWhereInputRecursive3(TypedDict, total=False):
    """Player arguments for searching"""
    id: Union[int, 'types.IntFilter']
    uuid: Union[str, 'types.StringFilter']
    username: Union[str, 'types.StringFilter']
    authenticated: Union[bool, 'types.BooleanFilter']
    Server: 'ServerRelationFilter'
    serverId: Union[int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['PlayerWhereInputRecursive4', List['PlayerWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PlayerWhereInputRecursive4']
    OR: List['PlayerWhereInputRecursive4']
    NOT: List['PlayerWhereInputRecursive4']


class PlayerWhereInputRecursive4(TypedDict, total=False):
    """Player arguments for searching"""
    id: Union[int, 'types.IntFilter']
    uuid: Union[str, 'types.StringFilter']
    username: Union[str, 'types.StringFilter']
    authenticated: Union[bool, 'types.BooleanFilter']
    Server: 'ServerRelationFilter'
    serverId: Union[int, 'types.IntFilter']



# aggregate Player types


    

class PlayerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Player arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    uuid: Union[str, 'types.StringWithAggregatesFilter']
    username: Union[str, 'types.StringWithAggregatesFilter']
    authenticated: Union[bool, 'types.BooleanWithAggregatesFilter']
    serverId: Union[int, 'types.IntWithAggregatesFilter']

    AND: List['PlayerScalarWhereWithAggregatesInputRecursive1']
    OR: List['PlayerScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PlayerScalarWhereWithAggregatesInputRecursive1']


class PlayerScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Player arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    uuid: Union[str, 'types.StringWithAggregatesFilter']
    username: Union[str, 'types.StringWithAggregatesFilter']
    authenticated: Union[bool, 'types.BooleanWithAggregatesFilter']
    serverId: Union[int, 'types.IntWithAggregatesFilter']

    AND: List['PlayerScalarWhereWithAggregatesInputRecursive2']
    OR: List['PlayerScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PlayerScalarWhereWithAggregatesInputRecursive2']


class PlayerScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Player arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    uuid: Union[str, 'types.StringWithAggregatesFilter']
    username: Union[str, 'types.StringWithAggregatesFilter']
    authenticated: Union[bool, 'types.BooleanWithAggregatesFilter']
    serverId: Union[int, 'types.IntWithAggregatesFilter']

    AND: List['PlayerScalarWhereWithAggregatesInputRecursive3']
    OR: List['PlayerScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PlayerScalarWhereWithAggregatesInputRecursive3']


class PlayerScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Player arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    uuid: Union[str, 'types.StringWithAggregatesFilter']
    username: Union[str, 'types.StringWithAggregatesFilter']
    authenticated: Union[bool, 'types.BooleanWithAggregatesFilter']
    serverId: Union[int, 'types.IntWithAggregatesFilter']

    AND: List['PlayerScalarWhereWithAggregatesInputRecursive4']
    OR: List['PlayerScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PlayerScalarWhereWithAggregatesInputRecursive4']


class PlayerScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Player arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    uuid: Union[str, 'types.StringWithAggregatesFilter']
    username: Union[str, 'types.StringWithAggregatesFilter']
    authenticated: Union[bool, 'types.BooleanWithAggregatesFilter']
    serverId: Union[int, 'types.IntWithAggregatesFilter']



class PlayerGroupByOutput(TypedDict, total=False):
    id: int
    uuid: str
    username: str
    authenticated: bool
    serverId: int
    _sum: 'PlayerSumAggregateOutput'
    _avg: 'PlayerAvgAggregateOutput'
    _min: 'PlayerMinAggregateOutput'
    _max: 'PlayerMaxAggregateOutput'
    _count: 'PlayerCountAggregateOutput'


class PlayerAvgAggregateOutput(TypedDict, total=False):
    """Player output for aggregating averages"""
    id: float
    serverId: float


class PlayerSumAggregateOutput(TypedDict, total=False):
    """Player output for aggregating sums"""
    id: int
    serverId: int


class PlayerScalarAggregateOutput(TypedDict, total=False):
    """Player output including scalar fields"""
    id: int
    uuid: str
    username: str
    authenticated: bool
    serverId: int


PlayerMinAggregateOutput = PlayerScalarAggregateOutput
PlayerMaxAggregateOutput = PlayerScalarAggregateOutput


class PlayerMaxAggregateInput(TypedDict, total=False):
    """Player input for aggregating by max"""
    id: bool
    uuid: bool
    username: bool
    authenticated: bool
    serverId: bool


class PlayerMinAggregateInput(TypedDict, total=False):
    """Player input for aggregating by min"""
    id: bool
    uuid: bool
    username: bool
    authenticated: bool
    serverId: bool


class PlayerNumberAggregateInput(TypedDict, total=False):
    """Player input for aggregating numbers"""
    id: bool
    serverId: bool


PlayerAvgAggregateInput = PlayerNumberAggregateInput
PlayerSumAggregateInput = PlayerNumberAggregateInput


PlayerCountAggregateInput = TypedDict(
    'PlayerCountAggregateInput',
    {
        'id': bool,
        'uuid': bool,
        'username': bool,
        'authenticated': bool,
        'serverId': bool,
        '_all': bool,
    },
    total=False,
)

PlayerCountAggregateOutput = TypedDict(
    'PlayerCountAggregateOutput',
    {
        'id': int,
        'uuid': int,
        'username': int,
        'authenticated': int,
        'serverId': int,
        '_all': int,
    },
    total=False,
)


PlayerKeys = Literal[
    'id',
    'uuid',
    'username',
    'authenticated',
    'Server',
    'serverId',
]
PlayerScalarFieldKeys = Literal[
    'id',
    'uuid',
    'username',
    'authenticated',
    'serverId',
]
PlayerScalarFieldKeysT = TypeVar('PlayerScalarFieldKeysT', bound=PlayerScalarFieldKeys)

PlayerRelationalFieldKeys = Literal[
        'Server',
    ]

# Version types

class VersionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Version create method"""
    id: int
    Server: 'ServerCreateManyNestedWithoutRelationsInput'


class VersionCreateInput(VersionOptionalCreateInput):
    """Required arguments to the Version create method"""
    name: str
    protocol: int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class VersionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Version create method, without relations"""
    id: int


class VersionCreateWithoutRelationsInput(VersionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Version create method, without relations"""
    name: str
    protocol: int


class VersionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'VersionCreateWithoutRelationsInput'
    connect: 'VersionWhereUniqueInput'


class VersionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['VersionCreateWithoutRelationsInput', List['VersionCreateWithoutRelationsInput']]
    connect: Union['VersionWhereUniqueInput', List['VersionWhereUniqueInput']]


_VersionWhereUnique_id_Input = TypedDict(
    '_VersionWhereUnique_id_Input',
    {
        'id': 'int',
    },
    total=True
)

VersionWhereUniqueInput = _VersionWhereUnique_id_Input


class VersionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, int]
    name: str
    protocol: Union[AtomicIntInput, int]
    Server: 'ServerUpdateManyWithoutRelationsInput'


class VersionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, int]
    name: str
    protocol: Union[AtomicIntInput, int]


class VersionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['VersionCreateWithoutRelationsInput']
    connect: List['VersionWhereUniqueInput']
    set: List['VersionWhereUniqueInput']
    disconnect: List['VersionWhereUniqueInput']
    delete: List['VersionWhereUniqueInput']

    # TODO
    # update: List['VersionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['VersionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['VersionScalarWhereInput']
    # upsert: List['VersionUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['VersionCreateOrConnectWithoutRelationsInput']


class VersionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'VersionCreateWithoutRelationsInput'
    connect: 'VersionWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'VersionUpdateInput'
    # upsert: 'VersionUpsertWithoutRelationsInput'
    # connectOrCreate: 'VersionCreateOrConnectWithoutRelationsInput'


class VersionUpsertInput(TypedDict):
    create: 'VersionCreateInput'
    update: 'VersionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Version_id_OrderByInput = TypedDict(
    '_Version_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Version_name_OrderByInput = TypedDict(
    '_Version_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Version_protocol_OrderByInput = TypedDict(
    '_Version_protocol_OrderByInput',
    {
        'protocol': 'SortOrder',
    },
    total=True
)

VersionOrderByInput = Union[
    '_Version_id_OrderByInput',
    '_Version_name_OrderByInput',
    '_Version_protocol_OrderByInput',
]



# recursive Version types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

VersionRelationFilter = TypedDict(
    'VersionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class VersionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class VersionInclude(TypedDict, total=False):
    """Version relational arguments"""
    Server: Union[bool, 'FindManyServerArgsFromVersion']


    

class ServerIncludeFromVersion(TypedDict, total=False):
    """Relational arguments for Version"""
    version: Union[bool, 'VersionArgsFromVersionRecursive1']
    players: Union[bool, 'FindManyPlayerArgsFromVersionRecursive1']
    minmax: Union[bool, 'MaximumArgsFromVersionRecursive1']


class ServerIncludeFromVersionRecursive1(TypedDict, total=False):
    """Relational arguments for Version"""
    version: Union[bool, 'VersionArgsFromVersionRecursive2']
    players: Union[bool, 'FindManyPlayerArgsFromVersionRecursive2']
    minmax: Union[bool, 'MaximumArgsFromVersionRecursive2']


class ServerIncludeFromVersionRecursive2(TypedDict, total=False):
    """Relational arguments for Version"""
    version: Union[bool, 'VersionArgsFromVersionRecursive3']
    players: Union[bool, 'FindManyPlayerArgsFromVersionRecursive3']
    minmax: Union[bool, 'MaximumArgsFromVersionRecursive3']


class ServerIncludeFromVersionRecursive3(TypedDict, total=False):
    """Relational arguments for Version"""
    version: Union[bool, 'VersionArgsFromVersionRecursive4']
    players: Union[bool, 'FindManyPlayerArgsFromVersionRecursive4']
    minmax: Union[bool, 'MaximumArgsFromVersionRecursive4']


class ServerIncludeFromVersionRecursive4(TypedDict, total=False):
    """Relational arguments for Version"""

    

class ServerArgsFromVersion(TypedDict, total=False):
    """Arguments for Version"""
    include: 'ServerIncludeFromServerRecursive1'


class ServerArgsFromVersionRecursive1(TypedDict, total=False):
    """Arguments for Version"""
    include: 'ServerIncludeFromServerRecursive2'


class ServerArgsFromVersionRecursive2(TypedDict, total=False):
    """Arguments for Version"""
    include: 'ServerIncludeFromServerRecursive3'


class ServerArgsFromVersionRecursive3(TypedDict, total=False):
    """Arguments for Version"""
    include: 'ServerIncludeFromServerRecursive4'


class ServerArgsFromVersionRecursive4(TypedDict, total=False):
    """Arguments for Version"""
    
    

class FindManyServerArgsFromVersion(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive1'


class FindManyServerArgsFromVersionRecursive1(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive2'


class FindManyServerArgsFromVersionRecursive2(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive3'


class FindManyServerArgsFromVersionRecursive3(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive4'


class FindManyServerArgsFromVersionRecursive4(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    
    

class PlayerIncludeFromVersion(TypedDict, total=False):
    """Relational arguments for Version"""
    Server: Union[bool, 'ServerArgsFromVersionRecursive1']


class PlayerIncludeFromVersionRecursive1(TypedDict, total=False):
    """Relational arguments for Version"""
    Server: Union[bool, 'ServerArgsFromVersionRecursive2']


class PlayerIncludeFromVersionRecursive2(TypedDict, total=False):
    """Relational arguments for Version"""
    Server: Union[bool, 'ServerArgsFromVersionRecursive3']


class PlayerIncludeFromVersionRecursive3(TypedDict, total=False):
    """Relational arguments for Version"""
    Server: Union[bool, 'ServerArgsFromVersionRecursive4']


class PlayerIncludeFromVersionRecursive4(TypedDict, total=False):
    """Relational arguments for Version"""

    

class PlayerArgsFromVersion(TypedDict, total=False):
    """Arguments for Version"""
    include: 'PlayerIncludeFromPlayerRecursive1'


class PlayerArgsFromVersionRecursive1(TypedDict, total=False):
    """Arguments for Version"""
    include: 'PlayerIncludeFromPlayerRecursive2'


class PlayerArgsFromVersionRecursive2(TypedDict, total=False):
    """Arguments for Version"""
    include: 'PlayerIncludeFromPlayerRecursive3'


class PlayerArgsFromVersionRecursive3(TypedDict, total=False):
    """Arguments for Version"""
    include: 'PlayerIncludeFromPlayerRecursive4'


class PlayerArgsFromVersionRecursive4(TypedDict, total=False):
    """Arguments for Version"""
    
    

class FindManyPlayerArgsFromVersion(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive1'


class FindManyPlayerArgsFromVersionRecursive1(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive2'


class FindManyPlayerArgsFromVersionRecursive2(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive3'


class FindManyPlayerArgsFromVersionRecursive3(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive4'


class FindManyPlayerArgsFromVersionRecursive4(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    
    

class VersionIncludeFromVersion(TypedDict, total=False):
    """Relational arguments for Version"""
    Server: Union[bool, 'FindManyServerArgsFromVersionRecursive1']


class VersionIncludeFromVersionRecursive1(TypedDict, total=False):
    """Relational arguments for Version"""
    Server: Union[bool, 'FindManyServerArgsFromVersionRecursive2']


class VersionIncludeFromVersionRecursive2(TypedDict, total=False):
    """Relational arguments for Version"""
    Server: Union[bool, 'FindManyServerArgsFromVersionRecursive3']


class VersionIncludeFromVersionRecursive3(TypedDict, total=False):
    """Relational arguments for Version"""
    Server: Union[bool, 'FindManyServerArgsFromVersionRecursive4']


class VersionIncludeFromVersionRecursive4(TypedDict, total=False):
    """Relational arguments for Version"""

    

class VersionArgsFromVersion(TypedDict, total=False):
    """Arguments for Version"""
    include: 'VersionIncludeFromVersionRecursive1'


class VersionArgsFromVersionRecursive1(TypedDict, total=False):
    """Arguments for Version"""
    include: 'VersionIncludeFromVersionRecursive2'


class VersionArgsFromVersionRecursive2(TypedDict, total=False):
    """Arguments for Version"""
    include: 'VersionIncludeFromVersionRecursive3'


class VersionArgsFromVersionRecursive3(TypedDict, total=False):
    """Arguments for Version"""
    include: 'VersionIncludeFromVersionRecursive4'


class VersionArgsFromVersionRecursive4(TypedDict, total=False):
    """Arguments for Version"""
    
    

class FindManyVersionArgsFromVersion(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive1'


class FindManyVersionArgsFromVersionRecursive1(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive2'


class FindManyVersionArgsFromVersionRecursive2(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive3'


class FindManyVersionArgsFromVersionRecursive3(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive4'


class FindManyVersionArgsFromVersionRecursive4(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    
    

class MaximumIncludeFromVersion(TypedDict, total=False):
    """Relational arguments for Version"""
    Server: Union[bool, 'FindManyServerArgsFromVersionRecursive1']


class MaximumIncludeFromVersionRecursive1(TypedDict, total=False):
    """Relational arguments for Version"""
    Server: Union[bool, 'FindManyServerArgsFromVersionRecursive2']


class MaximumIncludeFromVersionRecursive2(TypedDict, total=False):
    """Relational arguments for Version"""
    Server: Union[bool, 'FindManyServerArgsFromVersionRecursive3']


class MaximumIncludeFromVersionRecursive3(TypedDict, total=False):
    """Relational arguments for Version"""
    Server: Union[bool, 'FindManyServerArgsFromVersionRecursive4']


class MaximumIncludeFromVersionRecursive4(TypedDict, total=False):
    """Relational arguments for Version"""

    

class MaximumArgsFromVersion(TypedDict, total=False):
    """Arguments for Version"""
    include: 'MaximumIncludeFromMaximumRecursive1'


class MaximumArgsFromVersionRecursive1(TypedDict, total=False):
    """Arguments for Version"""
    include: 'MaximumIncludeFromMaximumRecursive2'


class MaximumArgsFromVersionRecursive2(TypedDict, total=False):
    """Arguments for Version"""
    include: 'MaximumIncludeFromMaximumRecursive3'


class MaximumArgsFromVersionRecursive3(TypedDict, total=False):
    """Arguments for Version"""
    include: 'MaximumIncludeFromMaximumRecursive4'


class MaximumArgsFromVersionRecursive4(TypedDict, total=False):
    """Arguments for Version"""
    
    

class FindManyMaximumArgsFromVersion(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive1'


class FindManyMaximumArgsFromVersionRecursive1(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive2'


class FindManyMaximumArgsFromVersionRecursive2(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive3'


class FindManyMaximumArgsFromVersionRecursive3(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive4'


class FindManyMaximumArgsFromVersionRecursive4(TypedDict, total=False):
    """Arguments for Version"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    


FindManyVersionArgs = FindManyVersionArgsFromVersion
FindFirstVersionArgs = FindManyVersionArgsFromVersion


    

class VersionWhereInput(TypedDict, total=False):
    """Version arguments for searching"""
    id: Union[int, 'types.IntFilter']
    name: Union[str, 'types.StringFilter']
    protocol: Union[int, 'types.IntFilter']
    Server: 'ServerListRelationFilter'

    # should be noted that AND and NOT should be Union['VersionWhereInputRecursive1', List['VersionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['VersionWhereInputRecursive1']
    OR: List['VersionWhereInputRecursive1']
    NOT: List['VersionWhereInputRecursive1']


class VersionWhereInputRecursive1(TypedDict, total=False):
    """Version arguments for searching"""
    id: Union[int, 'types.IntFilter']
    name: Union[str, 'types.StringFilter']
    protocol: Union[int, 'types.IntFilter']
    Server: 'ServerListRelationFilter'

    # should be noted that AND and NOT should be Union['VersionWhereInputRecursive2', List['VersionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['VersionWhereInputRecursive2']
    OR: List['VersionWhereInputRecursive2']
    NOT: List['VersionWhereInputRecursive2']


class VersionWhereInputRecursive2(TypedDict, total=False):
    """Version arguments for searching"""
    id: Union[int, 'types.IntFilter']
    name: Union[str, 'types.StringFilter']
    protocol: Union[int, 'types.IntFilter']
    Server: 'ServerListRelationFilter'

    # should be noted that AND and NOT should be Union['VersionWhereInputRecursive3', List['VersionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['VersionWhereInputRecursive3']
    OR: List['VersionWhereInputRecursive3']
    NOT: List['VersionWhereInputRecursive3']


class VersionWhereInputRecursive3(TypedDict, total=False):
    """Version arguments for searching"""
    id: Union[int, 'types.IntFilter']
    name: Union[str, 'types.StringFilter']
    protocol: Union[int, 'types.IntFilter']
    Server: 'ServerListRelationFilter'

    # should be noted that AND and NOT should be Union['VersionWhereInputRecursive4', List['VersionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['VersionWhereInputRecursive4']
    OR: List['VersionWhereInputRecursive4']
    NOT: List['VersionWhereInputRecursive4']


class VersionWhereInputRecursive4(TypedDict, total=False):
    """Version arguments for searching"""
    id: Union[int, 'types.IntFilter']
    name: Union[str, 'types.StringFilter']
    protocol: Union[int, 'types.IntFilter']
    Server: 'ServerListRelationFilter'



# aggregate Version types


    

class VersionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Version arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    name: Union[str, 'types.StringWithAggregatesFilter']
    protocol: Union[int, 'types.IntWithAggregatesFilter']

    AND: List['VersionScalarWhereWithAggregatesInputRecursive1']
    OR: List['VersionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['VersionScalarWhereWithAggregatesInputRecursive1']


class VersionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Version arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    name: Union[str, 'types.StringWithAggregatesFilter']
    protocol: Union[int, 'types.IntWithAggregatesFilter']

    AND: List['VersionScalarWhereWithAggregatesInputRecursive2']
    OR: List['VersionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['VersionScalarWhereWithAggregatesInputRecursive2']


class VersionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Version arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    name: Union[str, 'types.StringWithAggregatesFilter']
    protocol: Union[int, 'types.IntWithAggregatesFilter']

    AND: List['VersionScalarWhereWithAggregatesInputRecursive3']
    OR: List['VersionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['VersionScalarWhereWithAggregatesInputRecursive3']


class VersionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Version arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    name: Union[str, 'types.StringWithAggregatesFilter']
    protocol: Union[int, 'types.IntWithAggregatesFilter']

    AND: List['VersionScalarWhereWithAggregatesInputRecursive4']
    OR: List['VersionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['VersionScalarWhereWithAggregatesInputRecursive4']


class VersionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Version arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    name: Union[str, 'types.StringWithAggregatesFilter']
    protocol: Union[int, 'types.IntWithAggregatesFilter']



class VersionGroupByOutput(TypedDict, total=False):
    id: int
    name: str
    protocol: int
    _sum: 'VersionSumAggregateOutput'
    _avg: 'VersionAvgAggregateOutput'
    _min: 'VersionMinAggregateOutput'
    _max: 'VersionMaxAggregateOutput'
    _count: 'VersionCountAggregateOutput'


class VersionAvgAggregateOutput(TypedDict, total=False):
    """Version output for aggregating averages"""
    id: float
    protocol: float


class VersionSumAggregateOutput(TypedDict, total=False):
    """Version output for aggregating sums"""
    id: int
    protocol: int


class VersionScalarAggregateOutput(TypedDict, total=False):
    """Version output including scalar fields"""
    id: int
    name: str
    protocol: int


VersionMinAggregateOutput = VersionScalarAggregateOutput
VersionMaxAggregateOutput = VersionScalarAggregateOutput


class VersionMaxAggregateInput(TypedDict, total=False):
    """Version input for aggregating by max"""
    id: bool
    name: bool
    protocol: bool


class VersionMinAggregateInput(TypedDict, total=False):
    """Version input for aggregating by min"""
    id: bool
    name: bool
    protocol: bool


class VersionNumberAggregateInput(TypedDict, total=False):
    """Version input for aggregating numbers"""
    id: bool
    protocol: bool


VersionAvgAggregateInput = VersionNumberAggregateInput
VersionSumAggregateInput = VersionNumberAggregateInput


VersionCountAggregateInput = TypedDict(
    'VersionCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'protocol': bool,
        '_all': bool,
    },
    total=False,
)

VersionCountAggregateOutput = TypedDict(
    'VersionCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'protocol': int,
        '_all': int,
    },
    total=False,
)


VersionKeys = Literal[
    'id',
    'name',
    'protocol',
    'Server',
]
VersionScalarFieldKeys = Literal[
    'id',
    'name',
    'protocol',
]
VersionScalarFieldKeysT = TypeVar('VersionScalarFieldKeysT', bound=VersionScalarFieldKeys)

VersionRelationalFieldKeys = Literal[
        'Server',
    ]

# Maximum types

class MaximumOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Maximum create method"""
    id: int
    Server: 'ServerCreateManyNestedWithoutRelationsInput'


class MaximumCreateInput(MaximumOptionalCreateInput):
    """Required arguments to the Maximum create method"""
    min: str
    max: str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MaximumOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Maximum create method, without relations"""
    id: int


class MaximumCreateWithoutRelationsInput(MaximumOptionalCreateWithoutRelationsInput):
    """Required arguments to the Maximum create method, without relations"""
    min: str
    max: str


class MaximumCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MaximumCreateWithoutRelationsInput'
    connect: 'MaximumWhereUniqueInput'


class MaximumCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MaximumCreateWithoutRelationsInput', List['MaximumCreateWithoutRelationsInput']]
    connect: Union['MaximumWhereUniqueInput', List['MaximumWhereUniqueInput']]


_MaximumWhereUnique_id_Input = TypedDict(
    '_MaximumWhereUnique_id_Input',
    {
        'id': 'int',
    },
    total=True
)

MaximumWhereUniqueInput = _MaximumWhereUnique_id_Input


class MaximumUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, int]
    min: str
    max: str
    Server: 'ServerUpdateManyWithoutRelationsInput'


class MaximumUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, int]
    min: str
    max: str


class MaximumUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MaximumCreateWithoutRelationsInput']
    connect: List['MaximumWhereUniqueInput']
    set: List['MaximumWhereUniqueInput']
    disconnect: List['MaximumWhereUniqueInput']
    delete: List['MaximumWhereUniqueInput']

    # TODO
    # update: List['MaximumUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MaximumUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MaximumScalarWhereInput']
    # upsert: List['MaximumUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['MaximumCreateOrConnectWithoutRelationsInput']


class MaximumUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MaximumCreateWithoutRelationsInput'
    connect: 'MaximumWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MaximumUpdateInput'
    # upsert: 'MaximumUpsertWithoutRelationsInput'
    # connectOrCreate: 'MaximumCreateOrConnectWithoutRelationsInput'


class MaximumUpsertInput(TypedDict):
    create: 'MaximumCreateInput'
    update: 'MaximumUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Maximum_id_OrderByInput = TypedDict(
    '_Maximum_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Maximum_min_OrderByInput = TypedDict(
    '_Maximum_min_OrderByInput',
    {
        'min': 'SortOrder',
    },
    total=True
)

_Maximum_max_OrderByInput = TypedDict(
    '_Maximum_max_OrderByInput',
    {
        'max': 'SortOrder',
    },
    total=True
)

MaximumOrderByInput = Union[
    '_Maximum_id_OrderByInput',
    '_Maximum_min_OrderByInput',
    '_Maximum_max_OrderByInput',
]



# recursive Maximum types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MaximumRelationFilter = TypedDict(
    'MaximumRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MaximumListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MaximumInclude(TypedDict, total=False):
    """Maximum relational arguments"""
    Server: Union[bool, 'FindManyServerArgsFromMaximum']


    

class ServerIncludeFromMaximum(TypedDict, total=False):
    """Relational arguments for Maximum"""
    version: Union[bool, 'VersionArgsFromMaximumRecursive1']
    players: Union[bool, 'FindManyPlayerArgsFromMaximumRecursive1']
    minmax: Union[bool, 'MaximumArgsFromMaximumRecursive1']


class ServerIncludeFromMaximumRecursive1(TypedDict, total=False):
    """Relational arguments for Maximum"""
    version: Union[bool, 'VersionArgsFromMaximumRecursive2']
    players: Union[bool, 'FindManyPlayerArgsFromMaximumRecursive2']
    minmax: Union[bool, 'MaximumArgsFromMaximumRecursive2']


class ServerIncludeFromMaximumRecursive2(TypedDict, total=False):
    """Relational arguments for Maximum"""
    version: Union[bool, 'VersionArgsFromMaximumRecursive3']
    players: Union[bool, 'FindManyPlayerArgsFromMaximumRecursive3']
    minmax: Union[bool, 'MaximumArgsFromMaximumRecursive3']


class ServerIncludeFromMaximumRecursive3(TypedDict, total=False):
    """Relational arguments for Maximum"""
    version: Union[bool, 'VersionArgsFromMaximumRecursive4']
    players: Union[bool, 'FindManyPlayerArgsFromMaximumRecursive4']
    minmax: Union[bool, 'MaximumArgsFromMaximumRecursive4']


class ServerIncludeFromMaximumRecursive4(TypedDict, total=False):
    """Relational arguments for Maximum"""

    

class ServerArgsFromMaximum(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'ServerIncludeFromServerRecursive1'


class ServerArgsFromMaximumRecursive1(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'ServerIncludeFromServerRecursive2'


class ServerArgsFromMaximumRecursive2(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'ServerIncludeFromServerRecursive3'


class ServerArgsFromMaximumRecursive3(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'ServerIncludeFromServerRecursive4'


class ServerArgsFromMaximumRecursive4(TypedDict, total=False):
    """Arguments for Maximum"""
    
    

class FindManyServerArgsFromMaximum(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive1'


class FindManyServerArgsFromMaximumRecursive1(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive2'


class FindManyServerArgsFromMaximumRecursive2(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive3'


class FindManyServerArgsFromMaximumRecursive3(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    include: 'ServerIncludeFromServerRecursive4'


class FindManyServerArgsFromMaximumRecursive4(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['ServerOrderByInput', List['ServerOrderByInput']]
    where: 'ServerWhereInput'
    cursor: 'ServerWhereUniqueInput'
    
    

class PlayerIncludeFromMaximum(TypedDict, total=False):
    """Relational arguments for Maximum"""
    Server: Union[bool, 'ServerArgsFromMaximumRecursive1']


class PlayerIncludeFromMaximumRecursive1(TypedDict, total=False):
    """Relational arguments for Maximum"""
    Server: Union[bool, 'ServerArgsFromMaximumRecursive2']


class PlayerIncludeFromMaximumRecursive2(TypedDict, total=False):
    """Relational arguments for Maximum"""
    Server: Union[bool, 'ServerArgsFromMaximumRecursive3']


class PlayerIncludeFromMaximumRecursive3(TypedDict, total=False):
    """Relational arguments for Maximum"""
    Server: Union[bool, 'ServerArgsFromMaximumRecursive4']


class PlayerIncludeFromMaximumRecursive4(TypedDict, total=False):
    """Relational arguments for Maximum"""

    

class PlayerArgsFromMaximum(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'PlayerIncludeFromPlayerRecursive1'


class PlayerArgsFromMaximumRecursive1(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'PlayerIncludeFromPlayerRecursive2'


class PlayerArgsFromMaximumRecursive2(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'PlayerIncludeFromPlayerRecursive3'


class PlayerArgsFromMaximumRecursive3(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'PlayerIncludeFromPlayerRecursive4'


class PlayerArgsFromMaximumRecursive4(TypedDict, total=False):
    """Arguments for Maximum"""
    
    

class FindManyPlayerArgsFromMaximum(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive1'


class FindManyPlayerArgsFromMaximumRecursive1(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive2'


class FindManyPlayerArgsFromMaximumRecursive2(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive3'


class FindManyPlayerArgsFromMaximumRecursive3(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    include: 'PlayerIncludeFromPlayerRecursive4'


class FindManyPlayerArgsFromMaximumRecursive4(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['PlayerOrderByInput', List['PlayerOrderByInput']]
    where: 'PlayerWhereInput'
    cursor: 'PlayerWhereUniqueInput'
    
    

class VersionIncludeFromMaximum(TypedDict, total=False):
    """Relational arguments for Maximum"""
    Server: Union[bool, 'FindManyServerArgsFromMaximumRecursive1']


class VersionIncludeFromMaximumRecursive1(TypedDict, total=False):
    """Relational arguments for Maximum"""
    Server: Union[bool, 'FindManyServerArgsFromMaximumRecursive2']


class VersionIncludeFromMaximumRecursive2(TypedDict, total=False):
    """Relational arguments for Maximum"""
    Server: Union[bool, 'FindManyServerArgsFromMaximumRecursive3']


class VersionIncludeFromMaximumRecursive3(TypedDict, total=False):
    """Relational arguments for Maximum"""
    Server: Union[bool, 'FindManyServerArgsFromMaximumRecursive4']


class VersionIncludeFromMaximumRecursive4(TypedDict, total=False):
    """Relational arguments for Maximum"""

    

class VersionArgsFromMaximum(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'VersionIncludeFromVersionRecursive1'


class VersionArgsFromMaximumRecursive1(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'VersionIncludeFromVersionRecursive2'


class VersionArgsFromMaximumRecursive2(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'VersionIncludeFromVersionRecursive3'


class VersionArgsFromMaximumRecursive3(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'VersionIncludeFromVersionRecursive4'


class VersionArgsFromMaximumRecursive4(TypedDict, total=False):
    """Arguments for Maximum"""
    
    

class FindManyVersionArgsFromMaximum(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive1'


class FindManyVersionArgsFromMaximumRecursive1(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive2'


class FindManyVersionArgsFromMaximumRecursive2(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive3'


class FindManyVersionArgsFromMaximumRecursive3(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    include: 'VersionIncludeFromVersionRecursive4'


class FindManyVersionArgsFromMaximumRecursive4(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['VersionOrderByInput', List['VersionOrderByInput']]
    where: 'VersionWhereInput'
    cursor: 'VersionWhereUniqueInput'
    
    

class MaximumIncludeFromMaximum(TypedDict, total=False):
    """Relational arguments for Maximum"""
    Server: Union[bool, 'FindManyServerArgsFromMaximumRecursive1']


class MaximumIncludeFromMaximumRecursive1(TypedDict, total=False):
    """Relational arguments for Maximum"""
    Server: Union[bool, 'FindManyServerArgsFromMaximumRecursive2']


class MaximumIncludeFromMaximumRecursive2(TypedDict, total=False):
    """Relational arguments for Maximum"""
    Server: Union[bool, 'FindManyServerArgsFromMaximumRecursive3']


class MaximumIncludeFromMaximumRecursive3(TypedDict, total=False):
    """Relational arguments for Maximum"""
    Server: Union[bool, 'FindManyServerArgsFromMaximumRecursive4']


class MaximumIncludeFromMaximumRecursive4(TypedDict, total=False):
    """Relational arguments for Maximum"""

    

class MaximumArgsFromMaximum(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'MaximumIncludeFromMaximumRecursive1'


class MaximumArgsFromMaximumRecursive1(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'MaximumIncludeFromMaximumRecursive2'


class MaximumArgsFromMaximumRecursive2(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'MaximumIncludeFromMaximumRecursive3'


class MaximumArgsFromMaximumRecursive3(TypedDict, total=False):
    """Arguments for Maximum"""
    include: 'MaximumIncludeFromMaximumRecursive4'


class MaximumArgsFromMaximumRecursive4(TypedDict, total=False):
    """Arguments for Maximum"""
    
    

class FindManyMaximumArgsFromMaximum(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive1'


class FindManyMaximumArgsFromMaximumRecursive1(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive2'


class FindManyMaximumArgsFromMaximumRecursive2(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive3'


class FindManyMaximumArgsFromMaximumRecursive3(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    include: 'MaximumIncludeFromMaximumRecursive4'


class FindManyMaximumArgsFromMaximumRecursive4(TypedDict, total=False):
    """Arguments for Maximum"""
    take: int
    skip: int
    order_by: Union['MaximumOrderByInput', List['MaximumOrderByInput']]
    where: 'MaximumWhereInput'
    cursor: 'MaximumWhereUniqueInput'
    


FindManyMaximumArgs = FindManyMaximumArgsFromMaximum
FindFirstMaximumArgs = FindManyMaximumArgsFromMaximum


    

class MaximumWhereInput(TypedDict, total=False):
    """Maximum arguments for searching"""
    id: Union[int, 'types.IntFilter']
    min: Union[str, 'types.StringFilter']
    max: Union[str, 'types.StringFilter']
    Server: 'ServerListRelationFilter'

    # should be noted that AND and NOT should be Union['MaximumWhereInputRecursive1', List['MaximumWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MaximumWhereInputRecursive1']
    OR: List['MaximumWhereInputRecursive1']
    NOT: List['MaximumWhereInputRecursive1']


class MaximumWhereInputRecursive1(TypedDict, total=False):
    """Maximum arguments for searching"""
    id: Union[int, 'types.IntFilter']
    min: Union[str, 'types.StringFilter']
    max: Union[str, 'types.StringFilter']
    Server: 'ServerListRelationFilter'

    # should be noted that AND and NOT should be Union['MaximumWhereInputRecursive2', List['MaximumWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MaximumWhereInputRecursive2']
    OR: List['MaximumWhereInputRecursive2']
    NOT: List['MaximumWhereInputRecursive2']


class MaximumWhereInputRecursive2(TypedDict, total=False):
    """Maximum arguments for searching"""
    id: Union[int, 'types.IntFilter']
    min: Union[str, 'types.StringFilter']
    max: Union[str, 'types.StringFilter']
    Server: 'ServerListRelationFilter'

    # should be noted that AND and NOT should be Union['MaximumWhereInputRecursive3', List['MaximumWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MaximumWhereInputRecursive3']
    OR: List['MaximumWhereInputRecursive3']
    NOT: List['MaximumWhereInputRecursive3']


class MaximumWhereInputRecursive3(TypedDict, total=False):
    """Maximum arguments for searching"""
    id: Union[int, 'types.IntFilter']
    min: Union[str, 'types.StringFilter']
    max: Union[str, 'types.StringFilter']
    Server: 'ServerListRelationFilter'

    # should be noted that AND and NOT should be Union['MaximumWhereInputRecursive4', List['MaximumWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MaximumWhereInputRecursive4']
    OR: List['MaximumWhereInputRecursive4']
    NOT: List['MaximumWhereInputRecursive4']


class MaximumWhereInputRecursive4(TypedDict, total=False):
    """Maximum arguments for searching"""
    id: Union[int, 'types.IntFilter']
    min: Union[str, 'types.StringFilter']
    max: Union[str, 'types.StringFilter']
    Server: 'ServerListRelationFilter'



# aggregate Maximum types


    

class MaximumScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Maximum arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    min: Union[str, 'types.StringWithAggregatesFilter']
    max: Union[str, 'types.StringWithAggregatesFilter']

    AND: List['MaximumScalarWhereWithAggregatesInputRecursive1']
    OR: List['MaximumScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MaximumScalarWhereWithAggregatesInputRecursive1']


class MaximumScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Maximum arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    min: Union[str, 'types.StringWithAggregatesFilter']
    max: Union[str, 'types.StringWithAggregatesFilter']

    AND: List['MaximumScalarWhereWithAggregatesInputRecursive2']
    OR: List['MaximumScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MaximumScalarWhereWithAggregatesInputRecursive2']


class MaximumScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Maximum arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    min: Union[str, 'types.StringWithAggregatesFilter']
    max: Union[str, 'types.StringWithAggregatesFilter']

    AND: List['MaximumScalarWhereWithAggregatesInputRecursive3']
    OR: List['MaximumScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MaximumScalarWhereWithAggregatesInputRecursive3']


class MaximumScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Maximum arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    min: Union[str, 'types.StringWithAggregatesFilter']
    max: Union[str, 'types.StringWithAggregatesFilter']

    AND: List['MaximumScalarWhereWithAggregatesInputRecursive4']
    OR: List['MaximumScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MaximumScalarWhereWithAggregatesInputRecursive4']


class MaximumScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Maximum arguments for searching"""
    id: Union[int, 'types.IntWithAggregatesFilter']
    min: Union[str, 'types.StringWithAggregatesFilter']
    max: Union[str, 'types.StringWithAggregatesFilter']



class MaximumGroupByOutput(TypedDict, total=False):
    id: int
    min: str
    max: str
    _sum: 'MaximumSumAggregateOutput'
    _avg: 'MaximumAvgAggregateOutput'
    _min: 'MaximumMinAggregateOutput'
    _max: 'MaximumMaxAggregateOutput'
    _count: 'MaximumCountAggregateOutput'


class MaximumAvgAggregateOutput(TypedDict, total=False):
    """Maximum output for aggregating averages"""
    id: float


class MaximumSumAggregateOutput(TypedDict, total=False):
    """Maximum output for aggregating sums"""
    id: int


class MaximumScalarAggregateOutput(TypedDict, total=False):
    """Maximum output including scalar fields"""
    id: int
    min: str
    max: str


MaximumMinAggregateOutput = MaximumScalarAggregateOutput
MaximumMaxAggregateOutput = MaximumScalarAggregateOutput


class MaximumMaxAggregateInput(TypedDict, total=False):
    """Maximum input for aggregating by max"""
    id: bool
    min: bool
    max: bool


class MaximumMinAggregateInput(TypedDict, total=False):
    """Maximum input for aggregating by min"""
    id: bool
    min: bool
    max: bool


class MaximumNumberAggregateInput(TypedDict, total=False):
    """Maximum input for aggregating numbers"""
    id: bool


MaximumAvgAggregateInput = MaximumNumberAggregateInput
MaximumSumAggregateInput = MaximumNumberAggregateInput


MaximumCountAggregateInput = TypedDict(
    'MaximumCountAggregateInput',
    {
        'id': bool,
        'min': bool,
        'max': bool,
        '_all': bool,
    },
    total=False,
)

MaximumCountAggregateOutput = TypedDict(
    'MaximumCountAggregateOutput',
    {
        'id': int,
        'min': int,
        'max': int,
        '_all': int,
    },
    total=False,
)


MaximumKeys = Literal[
    'id',
    'min',
    'max',
    'Server',
]
MaximumScalarFieldKeys = Literal[
    'id',
    'min',
    'max',
]
MaximumScalarFieldKeysT = TypeVar('MaximumScalarFieldKeysT', bound=MaximumScalarFieldKeys)

MaximumRelationalFieldKeys = Literal[
        'Server',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields